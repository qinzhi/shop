<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class sina_SinaWeiBoAuthBean {
  static $_TSPEC;

  public $token = null;
  public $tokensecret = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'tokensecret',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['tokensecret'])) {
        $this->tokensecret = $vals['tokensecret'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'SinaWeiBoAuthBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tokensecret);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SinaWeiBoAuthBean');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::STRING, 1);
      $xfer += $output->writeString($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tokensecret !== null) {
      $xfer += $output->writeFieldBegin('tokensecret', TType::STRING, 2);
      $xfer += $output->writeString($this->tokensecret);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 3);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_OauthTokenBean {
  static $_TSPEC;

  public $action = null;
  public $regCallback = null;
  public $oauth_token = null;
  public $oauth_callback = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'regCallback',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'oauth_token',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'oauth_callback',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['regCallback'])) {
        $this->regCallback = $vals['regCallback'];
      }
      if (isset($vals['oauth_token'])) {
        $this->oauth_token = $vals['oauth_token'];
      }
      if (isset($vals['oauth_callback'])) {
        $this->oauth_callback = $vals['oauth_callback'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'OauthTokenBean';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->regCallback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauth_token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->oauth_callback);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('OauthTokenBean');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::STRING, 1);
      $xfer += $output->writeString($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regCallback !== null) {
      $xfer += $output->writeFieldBegin('regCallback', TType::STRING, 2);
      $xfer += $output->writeString($this->regCallback);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauth_token !== null) {
      $xfer += $output->writeFieldBegin('oauth_token', TType::STRING, 3);
      $xfer += $output->writeString($this->oauth_token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->oauth_callback !== null) {
      $xfer += $output->writeFieldBegin('oauth_callback', TType::STRING, 4);
      $xfer += $output->writeString($this->oauth_callback);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 5);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_User {
  static $_TSPEC;

  public $id = null;
  public $name = null;
  public $screenName = null;
  public $location = null;
  public $description = null;
  public $profileImageUrl = null;
  public $url = null;
  public $isProtected = null;
  public $followersCount = null;
  public $statusCreatedAt = null;
  public $statusId = null;
  public $statusText = null;
  public $statusSource = null;
  public $statusTruncated = null;
  public $statusInReplyToStatusId = null;
  public $statusInReplyToUserId = null;
  public $statusFavorited = null;
  public $statusInReplyToScreenName = null;
  public $profileBackgroundColor = null;
  public $profileTextColor = null;
  public $profileLinkColor = null;
  public $profileSidebarFillColor = null;
  public $profileSidebarBorderColor = null;
  public $friendsCount = null;
  public $createdAt = null;
  public $favouritesCount = null;
  public $utcOffset = null;
  public $timeZone = null;
  public $profileBackgroundImageUrl = null;
  public $profileBackgroundTile = null;
  public $following = null;
  public $notificationEnabled = null;
  public $statusesCount = null;
  public $geoEnabled = null;
  public $verified = null;
  public $userDomain = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'screenName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'location',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'profileImageUrl',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'url',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'isProtected',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'followersCount',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'statusCreatedAt',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'statusId',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'statusText',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'statusSource',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'statusTruncated',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'statusInReplyToStatusId',
          'type' => TType::I64,
          ),
        16 => array(
          'var' => 'statusInReplyToUserId',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'statusFavorited',
          'type' => TType::BOOL,
          ),
        18 => array(
          'var' => 'statusInReplyToScreenName',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'profileBackgroundColor',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'profileTextColor',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'profileLinkColor',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'profileSidebarFillColor',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'profileSidebarBorderColor',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'friendsCount',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'createdAt',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'favouritesCount',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'utcOffset',
          'type' => TType::I32,
          ),
        28 => array(
          'var' => 'timeZone',
          'type' => TType::STRING,
          ),
        29 => array(
          'var' => 'profileBackgroundImageUrl',
          'type' => TType::STRING,
          ),
        30 => array(
          'var' => 'profileBackgroundTile',
          'type' => TType::STRING,
          ),
        31 => array(
          'var' => 'following',
          'type' => TType::BOOL,
          ),
        32 => array(
          'var' => 'notificationEnabled',
          'type' => TType::BOOL,
          ),
        33 => array(
          'var' => 'statusesCount',
          'type' => TType::I32,
          ),
        34 => array(
          'var' => 'geoEnabled',
          'type' => TType::BOOL,
          ),
        35 => array(
          'var' => 'verified',
          'type' => TType::BOOL,
          ),
        36 => array(
          'var' => 'userDomain',
          'type' => TType::STRING,
          ),
        37 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['screenName'])) {
        $this->screenName = $vals['screenName'];
      }
      if (isset($vals['location'])) {
        $this->location = $vals['location'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['profileImageUrl'])) {
        $this->profileImageUrl = $vals['profileImageUrl'];
      }
      if (isset($vals['url'])) {
        $this->url = $vals['url'];
      }
      if (isset($vals['isProtected'])) {
        $this->isProtected = $vals['isProtected'];
      }
      if (isset($vals['followersCount'])) {
        $this->followersCount = $vals['followersCount'];
      }
      if (isset($vals['statusCreatedAt'])) {
        $this->statusCreatedAt = $vals['statusCreatedAt'];
      }
      if (isset($vals['statusId'])) {
        $this->statusId = $vals['statusId'];
      }
      if (isset($vals['statusText'])) {
        $this->statusText = $vals['statusText'];
      }
      if (isset($vals['statusSource'])) {
        $this->statusSource = $vals['statusSource'];
      }
      if (isset($vals['statusTruncated'])) {
        $this->statusTruncated = $vals['statusTruncated'];
      }
      if (isset($vals['statusInReplyToStatusId'])) {
        $this->statusInReplyToStatusId = $vals['statusInReplyToStatusId'];
      }
      if (isset($vals['statusInReplyToUserId'])) {
        $this->statusInReplyToUserId = $vals['statusInReplyToUserId'];
      }
      if (isset($vals['statusFavorited'])) {
        $this->statusFavorited = $vals['statusFavorited'];
      }
      if (isset($vals['statusInReplyToScreenName'])) {
        $this->statusInReplyToScreenName = $vals['statusInReplyToScreenName'];
      }
      if (isset($vals['profileBackgroundColor'])) {
        $this->profileBackgroundColor = $vals['profileBackgroundColor'];
      }
      if (isset($vals['profileTextColor'])) {
        $this->profileTextColor = $vals['profileTextColor'];
      }
      if (isset($vals['profileLinkColor'])) {
        $this->profileLinkColor = $vals['profileLinkColor'];
      }
      if (isset($vals['profileSidebarFillColor'])) {
        $this->profileSidebarFillColor = $vals['profileSidebarFillColor'];
      }
      if (isset($vals['profileSidebarBorderColor'])) {
        $this->profileSidebarBorderColor = $vals['profileSidebarBorderColor'];
      }
      if (isset($vals['friendsCount'])) {
        $this->friendsCount = $vals['friendsCount'];
      }
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['favouritesCount'])) {
        $this->favouritesCount = $vals['favouritesCount'];
      }
      if (isset($vals['utcOffset'])) {
        $this->utcOffset = $vals['utcOffset'];
      }
      if (isset($vals['timeZone'])) {
        $this->timeZone = $vals['timeZone'];
      }
      if (isset($vals['profileBackgroundImageUrl'])) {
        $this->profileBackgroundImageUrl = $vals['profileBackgroundImageUrl'];
      }
      if (isset($vals['profileBackgroundTile'])) {
        $this->profileBackgroundTile = $vals['profileBackgroundTile'];
      }
      if (isset($vals['following'])) {
        $this->following = $vals['following'];
      }
      if (isset($vals['notificationEnabled'])) {
        $this->notificationEnabled = $vals['notificationEnabled'];
      }
      if (isset($vals['statusesCount'])) {
        $this->statusesCount = $vals['statusesCount'];
      }
      if (isset($vals['geoEnabled'])) {
        $this->geoEnabled = $vals['geoEnabled'];
      }
      if (isset($vals['verified'])) {
        $this->verified = $vals['verified'];
      }
      if (isset($vals['userDomain'])) {
        $this->userDomain = $vals['userDomain'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'User';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->screenName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->location);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileImageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isProtected);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->followersCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusCreatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statusId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusSource);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusTruncated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statusInReplyToStatusId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->statusInReplyToUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->statusFavorited);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->statusInReplyToScreenName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileBackgroundColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileTextColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileLinkColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileSidebarFillColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileSidebarBorderColor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->friendsCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->favouritesCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->utcOffset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timeZone);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileBackgroundImageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->profileBackgroundTile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->following);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->notificationEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->statusesCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->geoEnabled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->verified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userDomain);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('User');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->screenName !== null) {
      $xfer += $output->writeFieldBegin('screenName', TType::STRING, 3);
      $xfer += $output->writeString($this->screenName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->location !== null) {
      $xfer += $output->writeFieldBegin('location', TType::STRING, 4);
      $xfer += $output->writeString($this->location);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 5);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileImageUrl !== null) {
      $xfer += $output->writeFieldBegin('profileImageUrl', TType::STRING, 6);
      $xfer += $output->writeString($this->profileImageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->url !== null) {
      $xfer += $output->writeFieldBegin('url', TType::STRING, 7);
      $xfer += $output->writeString($this->url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isProtected !== null) {
      $xfer += $output->writeFieldBegin('isProtected', TType::BOOL, 8);
      $xfer += $output->writeBool($this->isProtected);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->followersCount !== null) {
      $xfer += $output->writeFieldBegin('followersCount', TType::I32, 9);
      $xfer += $output->writeI32($this->followersCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusCreatedAt !== null) {
      $xfer += $output->writeFieldBegin('statusCreatedAt', TType::STRING, 10);
      $xfer += $output->writeString($this->statusCreatedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusId !== null) {
      $xfer += $output->writeFieldBegin('statusId', TType::I64, 11);
      $xfer += $output->writeI64($this->statusId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusText !== null) {
      $xfer += $output->writeFieldBegin('statusText', TType::STRING, 12);
      $xfer += $output->writeString($this->statusText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusSource !== null) {
      $xfer += $output->writeFieldBegin('statusSource', TType::STRING, 13);
      $xfer += $output->writeString($this->statusSource);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusTruncated !== null) {
      $xfer += $output->writeFieldBegin('statusTruncated', TType::BOOL, 14);
      $xfer += $output->writeBool($this->statusTruncated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusInReplyToStatusId !== null) {
      $xfer += $output->writeFieldBegin('statusInReplyToStatusId', TType::I64, 15);
      $xfer += $output->writeI64($this->statusInReplyToStatusId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusInReplyToUserId !== null) {
      $xfer += $output->writeFieldBegin('statusInReplyToUserId', TType::I64, 16);
      $xfer += $output->writeI64($this->statusInReplyToUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusFavorited !== null) {
      $xfer += $output->writeFieldBegin('statusFavorited', TType::BOOL, 17);
      $xfer += $output->writeBool($this->statusFavorited);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusInReplyToScreenName !== null) {
      $xfer += $output->writeFieldBegin('statusInReplyToScreenName', TType::STRING, 18);
      $xfer += $output->writeString($this->statusInReplyToScreenName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileBackgroundColor !== null) {
      $xfer += $output->writeFieldBegin('profileBackgroundColor', TType::STRING, 19);
      $xfer += $output->writeString($this->profileBackgroundColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileTextColor !== null) {
      $xfer += $output->writeFieldBegin('profileTextColor', TType::STRING, 20);
      $xfer += $output->writeString($this->profileTextColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileLinkColor !== null) {
      $xfer += $output->writeFieldBegin('profileLinkColor', TType::STRING, 21);
      $xfer += $output->writeString($this->profileLinkColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileSidebarFillColor !== null) {
      $xfer += $output->writeFieldBegin('profileSidebarFillColor', TType::STRING, 22);
      $xfer += $output->writeString($this->profileSidebarFillColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileSidebarBorderColor !== null) {
      $xfer += $output->writeFieldBegin('profileSidebarBorderColor', TType::STRING, 23);
      $xfer += $output->writeString($this->profileSidebarBorderColor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->friendsCount !== null) {
      $xfer += $output->writeFieldBegin('friendsCount', TType::I32, 24);
      $xfer += $output->writeI32($this->friendsCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::STRING, 25);
      $xfer += $output->writeString($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->favouritesCount !== null) {
      $xfer += $output->writeFieldBegin('favouritesCount', TType::I32, 26);
      $xfer += $output->writeI32($this->favouritesCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->utcOffset !== null) {
      $xfer += $output->writeFieldBegin('utcOffset', TType::I32, 27);
      $xfer += $output->writeI32($this->utcOffset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeZone !== null) {
      $xfer += $output->writeFieldBegin('timeZone', TType::STRING, 28);
      $xfer += $output->writeString($this->timeZone);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileBackgroundImageUrl !== null) {
      $xfer += $output->writeFieldBegin('profileBackgroundImageUrl', TType::STRING, 29);
      $xfer += $output->writeString($this->profileBackgroundImageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->profileBackgroundTile !== null) {
      $xfer += $output->writeFieldBegin('profileBackgroundTile', TType::STRING, 30);
      $xfer += $output->writeString($this->profileBackgroundTile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->following !== null) {
      $xfer += $output->writeFieldBegin('following', TType::BOOL, 31);
      $xfer += $output->writeBool($this->following);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notificationEnabled !== null) {
      $xfer += $output->writeFieldBegin('notificationEnabled', TType::BOOL, 32);
      $xfer += $output->writeBool($this->notificationEnabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->statusesCount !== null) {
      $xfer += $output->writeFieldBegin('statusesCount', TType::I32, 33);
      $xfer += $output->writeI32($this->statusesCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->geoEnabled !== null) {
      $xfer += $output->writeFieldBegin('geoEnabled', TType::BOOL, 34);
      $xfer += $output->writeBool($this->geoEnabled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->verified !== null) {
      $xfer += $output->writeFieldBegin('verified', TType::BOOL, 35);
      $xfer += $output->writeBool($this->verified);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userDomain !== null) {
      $xfer += $output->writeFieldBegin('userDomain', TType::STRING, 36);
      $xfer += $output->writeString($this->userDomain);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 37);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_RetweetDetails {
  static $_TSPEC;

  public $retweetId = null;
  public $retweetedAt = null;
  public $retweetingUser = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retweetId',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'retweetedAt',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'retweetingUser',
          'type' => TType::STRUCT,
          'class' => 'sina_User',
          ),
        4 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retweetId'])) {
        $this->retweetId = $vals['retweetId'];
      }
      if (isset($vals['retweetedAt'])) {
        $this->retweetedAt = $vals['retweetedAt'];
      }
      if (isset($vals['retweetingUser'])) {
        $this->retweetingUser = $vals['retweetingUser'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'RetweetDetails';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->retweetId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->retweetedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->retweetingUser = new sina_User();
            $xfer += $this->retweetingUser->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RetweetDetails');
    if ($this->retweetId !== null) {
      $xfer += $output->writeFieldBegin('retweetId', TType::I64, 1);
      $xfer += $output->writeI64($this->retweetId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retweetedAt !== null) {
      $xfer += $output->writeFieldBegin('retweetedAt', TType::STRING, 2);
      $xfer += $output->writeString($this->retweetedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retweetingUser !== null) {
      if (!is_object($this->retweetingUser)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retweetingUser', TType::STRUCT, 3);
      $xfer += $this->retweetingUser->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 4);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_Status {
  static $_TSPEC;

  public $createdAt = null;
  public $id = null;
  public $text = null;
  public $source = null;
  public $isTruncated = null;
  public $inReplyToStatusId = null;
  public $inReplyToUserId = null;
  public $isFavorited = null;
  public $inReplyToScreenName = null;
  public $latitude = null;
  public $longitude = null;
  public $thumbnail_pic = null;
  public $bmiddle_pic = null;
  public $original_pic = null;
  public $retweetDetails = null;
  public $mid = null;
  public $user = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createdAt',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'isTruncated',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'inReplyToStatusId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'inReplyToUserId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'isFavorited',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'inReplyToScreenName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'latitude',
          'type' => TType::BOOL,
          ),
        11 => array(
          'var' => 'longitude',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'thumbnail_pic',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'bmiddle_pic',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'original_pic',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'retweetDetails',
          'type' => TType::STRUCT,
          'class' => 'sina_RetweetDetails',
          ),
        17 => array(
          'var' => 'mid',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'user',
          'type' => TType::STRUCT,
          'class' => 'sina_User',
          ),
        19 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['isTruncated'])) {
        $this->isTruncated = $vals['isTruncated'];
      }
      if (isset($vals['inReplyToStatusId'])) {
        $this->inReplyToStatusId = $vals['inReplyToStatusId'];
      }
      if (isset($vals['inReplyToUserId'])) {
        $this->inReplyToUserId = $vals['inReplyToUserId'];
      }
      if (isset($vals['isFavorited'])) {
        $this->isFavorited = $vals['isFavorited'];
      }
      if (isset($vals['inReplyToScreenName'])) {
        $this->inReplyToScreenName = $vals['inReplyToScreenName'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['thumbnail_pic'])) {
        $this->thumbnail_pic = $vals['thumbnail_pic'];
      }
      if (isset($vals['bmiddle_pic'])) {
        $this->bmiddle_pic = $vals['bmiddle_pic'];
      }
      if (isset($vals['original_pic'])) {
        $this->original_pic = $vals['original_pic'];
      }
      if (isset($vals['retweetDetails'])) {
        $this->retweetDetails = $vals['retweetDetails'];
      }
      if (isset($vals['mid'])) {
        $this->mid = $vals['mid'];
      }
      if (isset($vals['user'])) {
        $this->user = $vals['user'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'Status';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isTruncated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->inReplyToStatusId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->inReplyToUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFavorited);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inReplyToScreenName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->thumbnail_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->bmiddle_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->original_pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRUCT) {
            $this->retweetDetails = new sina_RetweetDetails();
            $xfer += $this->retweetDetails->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRUCT) {
            $this->user = new sina_User();
            $xfer += $this->user->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Status');
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::STRING, 1);
      $xfer += $output->writeString($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 3);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 4);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTruncated !== null) {
      $xfer += $output->writeFieldBegin('isTruncated', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isTruncated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToStatusId !== null) {
      $xfer += $output->writeFieldBegin('inReplyToStatusId', TType::I64, 6);
      $xfer += $output->writeI64($this->inReplyToStatusId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToUserId !== null) {
      $xfer += $output->writeFieldBegin('inReplyToUserId', TType::I32, 7);
      $xfer += $output->writeI32($this->inReplyToUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFavorited !== null) {
      $xfer += $output->writeFieldBegin('isFavorited', TType::BOOL, 8);
      $xfer += $output->writeBool($this->isFavorited);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToScreenName !== null) {
      $xfer += $output->writeFieldBegin('inReplyToScreenName', TType::STRING, 9);
      $xfer += $output->writeString($this->inReplyToScreenName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::BOOL, 10);
      $xfer += $output->writeBool($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::BOOL, 11);
      $xfer += $output->writeBool($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thumbnail_pic !== null) {
      $xfer += $output->writeFieldBegin('thumbnail_pic', TType::STRING, 12);
      $xfer += $output->writeString($this->thumbnail_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bmiddle_pic !== null) {
      $xfer += $output->writeFieldBegin('bmiddle_pic', TType::STRING, 13);
      $xfer += $output->writeString($this->bmiddle_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->original_pic !== null) {
      $xfer += $output->writeFieldBegin('original_pic', TType::STRING, 14);
      $xfer += $output->writeString($this->original_pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retweetDetails !== null) {
      if (!is_object($this->retweetDetails)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('retweetDetails', TType::STRUCT, 15);
      $xfer += $this->retweetDetails->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mid !== null) {
      $xfer += $output->writeFieldBegin('mid', TType::STRING, 17);
      $xfer += $output->writeString($this->mid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user !== null) {
      if (!is_object($this->user)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('user', TType::STRUCT, 18);
      $xfer += $this->user->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 19);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_Comment {
  static $_TSPEC;

  public $createdAt = null;
  public $id = null;
  public $text = null;
  public $source = null;
  public $isTruncated = null;
  public $inReplyToStatusId = null;
  public $inReplyToUserId = null;
  public $isFavorited = null;
  public $inReplyToScreenName = null;
  public $latitude = null;
  public $longitude = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createdAt',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'id',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'isTruncated',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'inReplyToStatusId',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'inReplyToUserId',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'isFavorited',
          'type' => TType::BOOL,
          ),
        9 => array(
          'var' => 'inReplyToScreenName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'latitude',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'longitude',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['isTruncated'])) {
        $this->isTruncated = $vals['isTruncated'];
      }
      if (isset($vals['inReplyToStatusId'])) {
        $this->inReplyToStatusId = $vals['inReplyToStatusId'];
      }
      if (isset($vals['inReplyToUserId'])) {
        $this->inReplyToUserId = $vals['inReplyToUserId'];
      }
      if (isset($vals['isFavorited'])) {
        $this->isFavorited = $vals['isFavorited'];
      }
      if (isset($vals['inReplyToScreenName'])) {
        $this->inReplyToScreenName = $vals['inReplyToScreenName'];
      }
      if (isset($vals['latitude'])) {
        $this->latitude = $vals['latitude'];
      }
      if (isset($vals['longitude'])) {
        $this->longitude = $vals['longitude'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'Comment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isTruncated);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->inReplyToStatusId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->inReplyToUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isFavorited);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inReplyToScreenName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->latitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->longitude);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Comment');
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::STRING, 1);
      $xfer += $output->writeString($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 2);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 3);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 4);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isTruncated !== null) {
      $xfer += $output->writeFieldBegin('isTruncated', TType::BOOL, 5);
      $xfer += $output->writeBool($this->isTruncated);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToStatusId !== null) {
      $xfer += $output->writeFieldBegin('inReplyToStatusId', TType::I64, 6);
      $xfer += $output->writeI64($this->inReplyToStatusId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToUserId !== null) {
      $xfer += $output->writeFieldBegin('inReplyToUserId', TType::I64, 7);
      $xfer += $output->writeI64($this->inReplyToUserId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isFavorited !== null) {
      $xfer += $output->writeFieldBegin('isFavorited', TType::BOOL, 8);
      $xfer += $output->writeBool($this->isFavorited);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inReplyToScreenName !== null) {
      $xfer += $output->writeFieldBegin('inReplyToScreenName', TType::STRING, 9);
      $xfer += $output->writeString($this->inReplyToScreenName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->latitude !== null) {
      $xfer += $output->writeFieldBegin('latitude', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->latitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->longitude !== null) {
      $xfer += $output->writeFieldBegin('longitude', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->longitude);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 12);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class sina_Direct_message {
  static $_TSPEC;

  public $id = null;
  public $text = null;
  public $sender_id = null;
  public $recipient_id = null;
  public $created_at = null;
  public $sender_screen_name = null;
  public $recipient_screen_name = null;
  public $sender = null;
  public $recipient = null;
  public $exceptionflag = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'text',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sender_id',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'recipient_id',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'created_at',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'sender_screen_name',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'recipient_screen_name',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'sender',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'recipient',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'exceptionflag',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['text'])) {
        $this->text = $vals['text'];
      }
      if (isset($vals['sender_id'])) {
        $this->sender_id = $vals['sender_id'];
      }
      if (isset($vals['recipient_id'])) {
        $this->recipient_id = $vals['recipient_id'];
      }
      if (isset($vals['created_at'])) {
        $this->created_at = $vals['created_at'];
      }
      if (isset($vals['sender_screen_name'])) {
        $this->sender_screen_name = $vals['sender_screen_name'];
      }
      if (isset($vals['recipient_screen_name'])) {
        $this->recipient_screen_name = $vals['recipient_screen_name'];
      }
      if (isset($vals['sender'])) {
        $this->sender = $vals['sender'];
      }
      if (isset($vals['recipient'])) {
        $this->recipient = $vals['recipient'];
      }
      if (isset($vals['exceptionflag'])) {
        $this->exceptionflag = $vals['exceptionflag'];
      }
    }
  }

  public function getName() {
    return 'Direct_message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->text);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->sender_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->recipient_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->created_at);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sender_screen_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recipient_screen_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sender);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->recipient);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Direct_message');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->text !== null) {
      $xfer += $output->writeFieldBegin('text', TType::STRING, 2);
      $xfer += $output->writeString($this->text);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sender_id !== null) {
      $xfer += $output->writeFieldBegin('sender_id', TType::I64, 3);
      $xfer += $output->writeI64($this->sender_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recipient_id !== null) {
      $xfer += $output->writeFieldBegin('recipient_id', TType::I64, 4);
      $xfer += $output->writeI64($this->recipient_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->created_at !== null) {
      $xfer += $output->writeFieldBegin('created_at', TType::STRING, 5);
      $xfer += $output->writeString($this->created_at);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sender_screen_name !== null) {
      $xfer += $output->writeFieldBegin('sender_screen_name', TType::STRING, 6);
      $xfer += $output->writeString($this->sender_screen_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recipient_screen_name !== null) {
      $xfer += $output->writeFieldBegin('recipient_screen_name', TType::STRING, 7);
      $xfer += $output->writeString($this->recipient_screen_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sender !== null) {
      $xfer += $output->writeFieldBegin('sender', TType::STRING, 8);
      $xfer += $output->writeString($this->sender);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recipient !== null) {
      $xfer += $output->writeFieldBegin('recipient', TType::STRING, 10);
      $xfer += $output->writeString($this->recipient);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionflag !== null) {
      $xfer += $output->writeFieldBegin('exceptionflag', TType::STRING, 11);
      $xfer += $output->writeString($this->exceptionflag);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
