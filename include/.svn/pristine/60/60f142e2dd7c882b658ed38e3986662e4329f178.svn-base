<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class topapi_TopApiResultThrift {
  static $_TSPEC;

  public $optresult = null;
  public $opterflag = null;
  public $errorinfo = null;
  public $extd = null;
  public $serinfo = null;
  public $errorid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'optresult',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'opterflag',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'errorinfo',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'extd',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'serinfo',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'errorid',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['optresult'])) {
        $this->optresult = $vals['optresult'];
      }
      if (isset($vals['opterflag'])) {
        $this->opterflag = $vals['opterflag'];
      }
      if (isset($vals['errorinfo'])) {
        $this->errorinfo = $vals['errorinfo'];
      }
      if (isset($vals['extd'])) {
        $this->extd = $vals['extd'];
      }
      if (isset($vals['serinfo'])) {
        $this->serinfo = $vals['serinfo'];
      }
      if (isset($vals['errorid'])) {
        $this->errorid = $vals['errorid'];
      }
    }
  }

  public function getName() {
    return 'TopApiResultThrift';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->optresult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->opterflag);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->extd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->serinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errorid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiResultThrift');
    if ($this->optresult !== null) {
      $xfer += $output->writeFieldBegin('optresult', TType::STRING, 1);
      $xfer += $output->writeString($this->optresult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->opterflag !== null) {
      $xfer += $output->writeFieldBegin('opterflag', TType::I32, 2);
      $xfer += $output->writeI32($this->opterflag);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorinfo !== null) {
      $xfer += $output->writeFieldBegin('errorinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->errorinfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extd !== null) {
      $xfer += $output->writeFieldBegin('extd', TType::STRING, 4);
      $xfer += $output->writeString($this->extd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->serinfo !== null) {
      $xfer += $output->writeFieldBegin('serinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->serinfo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errorid !== null) {
      $xfer += $output->writeFieldBegin('errorid', TType::STRING, 6);
      $xfer += $output->writeString($this->errorid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
