<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once 'TopApi_types.php';

interface topapi_TopApiThriftIf {
  public function TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo);
  public function ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function tradeFullinfo($parm0, $parm1, $parm2, $clientinfo);
  public function incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo);
  public function ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
  public function Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function UserAccountGet($parm0, $parm1, $parm2, $clientinfo);
  public function itemProcessAdviseGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function itemProcessShieldGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo);
  public function SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function itemProcessWarnGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function itemProcessTypeStat($parm0, $parm1, $parm2, $clientinfo);
  public function getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function itemProcessAdvisesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function itemProcessPunishGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function itemProcessPunishesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo);
  public function UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function itemProcessRuletypeStat($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function UserContractGet($parm0, $parm1, $parm2, $clientinfo);
  public function ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function JushitaJdpUserAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function itemProcessWarnsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function Dsqlquery($parm0, $clientinfo);
  public function getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ShopcatsList($parm0, $parm1, $parm2, $clientinfo);
  public function ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function itemProcessShieldsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function Dsqlupdate($parm0, $clientinfo);
  public function updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function lightState($parm0, $parm1, $parm2, $clientinfo);
  public function getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function DesUpackLogin($parm0, $parm1, $clientinfo);
  public function DesUpackLoginIphone($parm0, $parm1, $clientinfo);
  public function DesEncrypt($parm0, $parm1, $clientinfo);
  public function DesUnEncrypt($parm0, $parm1, $clientinfo);
}

class topapi_TopApiThriftClient implements topapi_TopApiThriftIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradePostAgeUpdate();
  }

  public function send_TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradePostAgeUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradePostAgeUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradePostAgeUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradePostAgeUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradePostAgeUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradePostAgeUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradePostAgeUpdate failed: unknown result");
  }

  public function ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_ItemsInventorGet();
  }

  public function send_ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsInventorGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsInventorGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsInventorGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsInventorGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsInventorGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsInventorGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsInventorGet failed: unknown result");
  }

  public function SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_SellerCatsList();
  }

  public function send_SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SellerCatsList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SellerCatsList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SellerCatsList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SellerCatsList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SellerCatsList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SellerCatsList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SellerCatsList failed: unknown result");
  }

  public function SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_SerchRateList();
  }

  public function send_SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SerchRateList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SerchRateList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SerchRateList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SerchRateList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SerchRateList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SerchRateList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SerchRateList failed: unknown result");
  }

  public function WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_WwChatpeersGet();
  }

  public function send_WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatpeersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatpeersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatpeersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatpeersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatpeersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatpeersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatpeersGet failed: unknown result");
  }

  public function FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_FenxiaoLoginUserGet();
  }

  public function send_FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoLoginUserGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoLoginUserGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoLoginUserGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoLoginUserGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoLoginUserGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoLoginUserGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoLoginUserGet failed: unknown result");
  }

  public function ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_ItemsInventorGetEx();
  }

  public function send_ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsInventorGetEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsInventorGetEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsInventorGetEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsInventorGetEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsInventorGetEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsInventorGetEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsInventorGetEx failed: unknown result");
  }

  public function ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemRecommendAdd();
  }

  public function send_ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemRecommendAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemRecommendAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemRecommendAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemRecommendAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemRecommendAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemRecommendAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemRecommendAdd failed: unknown result");
  }

  public function getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getLogisticsOrders();
  }

  public function send_getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrders failed: unknown result");
  }

  public function getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getAppToken();
  }

  public function send_getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getAppToken_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAppToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAppToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAppToken()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getAppToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getAppToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAppToken failed: unknown result");
  }

  public function tradeFullinfo($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_tradeFullinfo($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_tradeFullinfo();
  }

  public function send_tradeFullinfo($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_tradeFullinfo_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tradeFullinfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tradeFullinfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tradeFullinfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_tradeFullinfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_tradeFullinfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("tradeFullinfo failed: unknown result");
  }

  public function incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_incrementCustomerStop();
  }

  public function send_incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_incrementCustomerStop_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'incrementCustomerStop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('incrementCustomerStop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_incrementCustomerStop()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_incrementCustomerStop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_incrementCustomerStop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("incrementCustomerStop failed: unknown result");
  }

  public function ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ScheOpt();
  }

  public function send_ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ScheOpt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ScheOpt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ScheOpt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ScheOpt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ScheOpt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ScheOpt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ScheOpt failed: unknown result");
  }

  public function SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $this->send_SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
    return $this->recv_SkuUpdate();
  }

  public function send_SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SkuUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SkuUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SkuUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SkuUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SkuUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SkuUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SkuUpdate failed: unknown result");
  }

  public function Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_Address();
  }

  public function send_Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Address_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Address()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Address failed: unknown result");
  }

  public function UserAccountGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_UserAccountGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_UserAccountGet();
  }

  public function send_UserAccountGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserAccountGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserAccountGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserAccountGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserAccountGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserAccountGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserAccountGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserAccountGet failed: unknown result");
  }

  public function itemProcessAdviseGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_itemProcessAdviseGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_itemProcessAdviseGet();
  }

  public function send_itemProcessAdviseGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessAdviseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessAdviseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessAdviseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessAdviseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessAdviseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessAdviseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessAdviseGet failed: unknown result");
  }

  public function itemProcessShieldGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_itemProcessShieldGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_itemProcessShieldGet();
  }

  public function send_itemProcessShieldGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessShieldGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessShieldGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessShieldGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessShieldGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessShieldGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessShieldGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessShieldGet failed: unknown result");
  }

  public function incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_incrementCustomerPermit();
  }

  public function send_incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_incrementCustomerPermit_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'incrementCustomerPermit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('incrementCustomerPermit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_incrementCustomerPermit()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_incrementCustomerPermit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_incrementCustomerPermit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("incrementCustomerPermit failed: unknown result");
  }

  public function SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_SellerCatsListAdd();
  }

  public function send_SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SellerCatsListAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SellerCatsListAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SellerCatsListAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SellerCatsListAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SellerCatsListAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SellerCatsListAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SellerCatsListAdd failed: unknown result");
  }

  public function RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_RefundMessageGet();
  }

  public function send_RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundMessageGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundMessageGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundMessageGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundMessageGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundMessageGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundMessageGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundMessageGet failed: unknown result");
  }

  public function AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_AlipayUserGet();
  }

  public function send_AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AlipayUserGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AlipayUserGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AlipayUserGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AlipayUserGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AlipayUserGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AlipayUserGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AlipayUserGet failed: unknown result");
  }

  public function PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_PostageUpdate();
  }

  public function send_PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_PostageUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'PostageUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('PostageUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_PostageUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_PostageUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_PostageUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("PostageUpdate failed: unknown result");
  }

  public function OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_OauthTokenGet();
  }

  public function send_OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OauthTokenGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OauthTokenGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OauthTokenGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OauthTokenGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OauthTokenGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OauthTokenGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OauthTokenGet failed: unknown result");
  }

  public function WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_WwSubusersGet();
  }

  public function send_WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwSubusersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwSubusersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwSubusersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwSubusersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwSubusersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwSubusersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwSubusersGet failed: unknown result");
  }

  public function TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_TradeMemoUpdate();
  }

  public function send_TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeMemoUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeMemoUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeMemoUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeMemoUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeMemoUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeMemoUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeMemoUpdate failed: unknown result");
  }

  public function refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_refundGetEX();
  }

  public function send_refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundGetEX_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundGetEX', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundGetEX', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundGetEX()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundGetEX_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundGetEX_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundGetEX failed: unknown result");
  }

  public function RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_RefundGet();
  }

  public function send_RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundGet failed: unknown result");
  }

  public function itemProcessWarnGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_itemProcessWarnGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_itemProcessWarnGet();
  }

  public function send_itemProcessWarnGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessWarnGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessWarnGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessWarnGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessWarnGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessWarnGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessWarnGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessWarnGet failed: unknown result");
  }

  public function TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TqlOpt();
  }

  public function send_TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TqlOpt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TqlOpt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TqlOpt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TqlOpt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TqlOpt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TqlOpt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TqlOpt failed: unknown result");
  }

  public function itemProcessTypeStat($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_itemProcessTypeStat($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_itemProcessTypeStat();
  }

  public function send_itemProcessTypeStat($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessTypeStat_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessTypeStat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessTypeStat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessTypeStat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessTypeStat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessTypeStat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessTypeStat failed: unknown result");
  }

  public function getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getUser();
  }

  public function send_getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getUser_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUser failed: unknown result");
  }

  public function OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_OnlineSend();
  }

  public function send_OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OnlineSend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OnlineSend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OnlineSend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OnlineSend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OnlineSend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OnlineSend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OnlineSend failed: unknown result");
  }

  public function getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_getTradesSoldEx();
  }

  public function send_getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTradesSoldEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTradesSoldEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTradesSoldEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTradesSoldEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTradesSoldEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTradesSoldEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTradesSoldEx failed: unknown result");
  }

  public function itemProcessAdvisesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_itemProcessAdvisesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_itemProcessAdvisesSearch();
  }

  public function send_itemProcessAdvisesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessAdvisesSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessAdvisesSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessAdvisesSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessAdvisesSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessAdvisesSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessAdvisesSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessAdvisesSearch failed: unknown result");
  }

  public function refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_refundsingOrdersEx();
  }

  public function send_refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundsingOrdersEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundsingOrdersEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundsingOrdersEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundsingOrdersEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundsingOrdersEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundsingOrdersEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundsingOrdersEx failed: unknown result");
  }

  public function itemProcessPunishGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_itemProcessPunishGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_itemProcessPunishGet();
  }

  public function send_itemProcessPunishGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessPunishGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessPunishGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessPunishGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessPunishGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessPunishGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessPunishGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessPunishGet failed: unknown result");
  }

  public function traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_traderatesGet();
  }

  public function send_traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_traderatesGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'traderatesGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('traderatesGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_traderatesGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_traderatesGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_traderatesGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("traderatesGet failed: unknown result");
  }

  public function WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_WwChatlogGet();
  }

  public function send_WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatlogGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatlogGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatlogGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatlogGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatlogGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatlogGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatlogGet failed: unknown result");
  }

  public function OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_OfflineSend();
  }

  public function send_OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OfflineSend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OfflineSend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OfflineSend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OfflineSend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OfflineSend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OfflineSend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OfflineSend failed: unknown result");
  }

  public function getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getItemsGet();
  }

  public function send_getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getItemsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getItemsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getItemsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getItemsGet failed: unknown result");
  }

  public function getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_getTradesSold();
  }

  public function send_getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTradesSold_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTradesSold', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTradesSold', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTradesSold()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTradesSold_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTradesSold_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTradesSold failed: unknown result");
  }

  public function ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemDelete();
  }

  public function send_ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemDelete failed: unknown result");
  }

  public function Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_Priceupdate();
  }

  public function send_Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Priceupdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Priceupdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Priceupdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Priceupdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Priceupdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Priceupdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Priceupdate failed: unknown result");
  }

  public function autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_autologin();
  }

  public function send_autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_autologin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'autologin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('autologin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_autologin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_autologin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_autologin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("autologin failed: unknown result");
  }

  public function ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_ItemUpdate();
  }

  public function send_ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemUpdate failed: unknown result");
  }

  public function TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TaskDelete();
  }

  public function send_TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TaskDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TaskDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TaskDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TaskDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TaskDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TaskDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TaskDelete failed: unknown result");
  }

  public function getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getShop();
  }

  public function send_getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getShop_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShop()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getShop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getShop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getShop failed: unknown result");
  }

  public function itemProcessPunishesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_itemProcessPunishesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_itemProcessPunishesSearch();
  }

  public function send_itemProcessPunishesSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessPunishesSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessPunishesSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessPunishesSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessPunishesSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessPunishesSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessPunishesSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessPunishesSearch failed: unknown result");
  }

  public function UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_UserTradeSearch();
  }

  public function send_UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserTradeSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserTradeSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserTradeSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserTradeSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserTradeSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserTradeSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserTradeSearch failed: unknown result");
  }

  public function getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLogisticsOrdersDetail();
  }

  public function send_getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrdersDetail_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrdersDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrdersDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrdersDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrdersDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrdersDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrdersDetail failed: unknown result");
  }

  public function RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_RateAdd();
  }

  public function send_RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RateAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RateAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RateAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RateAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RateAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RateAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RateAdd failed: unknown result");
  }

  public function FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_FenxiaoOrdersMessageAdd();
  }

  public function send_FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoOrdersMessageAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoOrdersMessageAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoOrdersMessageAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoOrdersMessageAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoOrdersMessageAdd failed: unknown result");
  }

  public function topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_topLoginNew();
  }

  public function send_topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_topLoginNew_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'topLoginNew', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('topLoginNew', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_topLoginNew()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_topLoginNew_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_topLoginNew_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("topLoginNew failed: unknown result");
  }

  public function WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwChatrecordGet();
  }

  public function send_WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatrecordGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatrecordGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatrecordGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatrecordGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatrecordGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatrecordGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatrecordGet failed: unknown result");
  }

  public function ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_ShopRemainShowCase();
  }

  public function send_ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ShopRemainShowCase_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ShopRemainShowCase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ShopRemainShowCase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ShopRemainShowCase()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ShopRemainShowCase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ShopRemainShowCase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ShopRemainShowCase failed: unknown result");
  }

  public function UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_UpdateDelisting();
  }

  public function send_UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UpdateDelisting_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateDelisting', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateDelisting', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateDelisting()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UpdateDelisting_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UpdateDelisting_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UpdateDelisting failed: unknown result");
  }

  public function itemProcessRuletypeStat($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_itemProcessRuletypeStat($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_itemProcessRuletypeStat();
  }

  public function send_itemProcessRuletypeStat($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessRuletypeStat_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessRuletypeStat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessRuletypeStat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessRuletypeStat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessRuletypeStat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessRuletypeStat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessRuletypeStat failed: unknown result");
  }

  public function AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_AddressUpdate();
  }

  public function send_AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AddressUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AddressUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AddressUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AddressUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AddressUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AddressUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AddressUpdate failed: unknown result");
  }

  public function UserContractGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_UserContractGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_UserContractGet();
  }

  public function send_UserContractGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserContractGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserContractGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserContractGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserContractGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserContractGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserContractGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserContractGet failed: unknown result");
  }

  public function ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_ItemsOnsaleSearch();
  }

  public function send_ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsOnsaleSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsOnsaleSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsOnsaleSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsOnsaleSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsOnsaleSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsOnsaleSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsOnsaleSearch failed: unknown result");
  }

  public function SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_SubscribeGet();
  }

  public function send_SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SubscribeGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SubscribeGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SubscribeGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SubscribeGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SubscribeGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SubscribeGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SubscribeGet failed: unknown result");
  }

  public function UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_UmpPromotionGet();
  }

  public function send_UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UmpPromotionGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UmpPromotionGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UmpPromotionGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UmpPromotionGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UmpPromotionGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UmpPromotionGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UmpPromotionGet failed: unknown result");
  }

  public function WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwReceivenumGet();
  }

  public function send_WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwReceivenumGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwReceivenumGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwReceivenumGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwReceivenumGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwReceivenumGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwReceivenumGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwReceivenumGet failed: unknown result");
  }

  public function topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_topLogin();
  }

  public function send_topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_topLogin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'topLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('topLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_topLogin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_topLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_topLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("topLogin failed: unknown result");
  }

  public function TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_TradeMemoAdd();
  }

  public function send_TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeMemoAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeMemoAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeMemoAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeMemoAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeMemoAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeMemoAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeMemoAdd failed: unknown result");
  }

  public function RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_RefundMessageAdd();
  }

  public function send_RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundMessageAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundMessageAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundMessageAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundMessageAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundMessageAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundMessageAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundMessageAdd failed: unknown result");
  }

  public function getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getUsers();
  }

  public function send_getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getUsers_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsers()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getUsers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getUsers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUsers failed: unknown result");
  }

  public function UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_UpdateListing();
  }

  public function send_UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UpdateListing_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateListing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateListing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateListing()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UpdateListing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UpdateListing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UpdateListing failed: unknown result");
  }

  public function getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getItemsOnsale();
  }

  public function send_getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getItemsOnsale_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemsOnsale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemsOnsale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemsOnsale()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getItemsOnsale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getItemsOnsale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getItemsOnsale failed: unknown result");
  }

  public function waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_waitBuyerPayOrders();
  }

  public function send_waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_waitBuyerPayOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'waitBuyerPayOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('waitBuyerPayOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_waitBuyerPayOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_waitBuyerPayOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_waitBuyerPayOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("waitBuyerPayOrders failed: unknown result");
  }

  public function JushitaJdpUserAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_JushitaJdpUserAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_JushitaJdpUserAdd();
  }

  public function send_JushitaJdpUserAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_JushitaJdpUserAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'JushitaJdpUserAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('JushitaJdpUserAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_JushitaJdpUserAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_JushitaJdpUserAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_JushitaJdpUserAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("JushitaJdpUserAdd failed: unknown result");
  }

  public function RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_RefundRefuse();
  }

  public function send_RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundRefuse_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundRefuse', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundRefuse', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundRefuse()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundRefuse_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundRefuse_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundRefuse failed: unknown result");
  }

  public function AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_AlipayOauthTokenGet();
  }

  public function send_AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AlipayOauthTokenGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AlipayOauthTokenGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AlipayOauthTokenGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AlipayOauthTokenGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AlipayOauthTokenGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AlipayOauthTokenGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AlipayOauthTokenGet failed: unknown result");
  }

  public function logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_logisticsOrdersGet();
  }

  public function send_logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_logisticsOrdersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logisticsOrdersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logisticsOrdersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logisticsOrdersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_logisticsOrdersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_logisticsOrdersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("logisticsOrdersGet failed: unknown result");
  }

  public function newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_newAddress();
  }

  public function send_newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_newAddress_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'newAddress', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('newAddress', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_newAddress()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_newAddress_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_newAddress_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("newAddress failed: unknown result");
  }

  public function itemProcessWarnsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_itemProcessWarnsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_itemProcessWarnsSearch();
  }

  public function send_itemProcessWarnsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessWarnsSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessWarnsSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessWarnsSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessWarnsSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessWarnsSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessWarnsSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessWarnsSearch failed: unknown result");
  }

  public function LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_LogisticsConsignResend();
  }

  public function send_LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_LogisticsConsignResend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'LogisticsConsignResend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('LogisticsConsignResend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_LogisticsConsignResend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_LogisticsConsignResend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_LogisticsConsignResend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("LogisticsConsignResend failed: unknown result");
  }

  public function TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_TradeShipAddressUpdatetrade();
  }

  public function send_TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeShipAddressUpdatetrade_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeShipAddressUpdatetrade', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeShipAddressUpdatetrade', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeShipAddressUpdatetrade()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeShipAddressUpdatetrade_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeShipAddressUpdatetrade_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeShipAddressUpdatetrade failed: unknown result");
  }

  public function DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_DummySend();
  }

  public function send_DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DummySend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DummySend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DummySend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DummySend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DummySend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DummySend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DummySend failed: unknown result");
  }

  public function ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemRecommendDelete();
  }

  public function send_ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemRecommendDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemRecommendDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemRecommendDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemRecommendDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemRecommendDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemRecommendDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemRecommendDelete failed: unknown result");
  }

  public function Dsqlquery($parm0, $clientinfo)
  {
    $this->send_Dsqlquery($parm0, $clientinfo);
    return $this->recv_Dsqlquery();
  }

  public function send_Dsqlquery($parm0, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Dsqlquery_args();
    $args->parm0 = $parm0;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Dsqlquery', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Dsqlquery', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Dsqlquery()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Dsqlquery_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Dsqlquery_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Dsqlquery failed: unknown result");
  }

  public function getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getTraceSearch();
  }

  public function send_getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTraceSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTraceSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTraceSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTraceSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTraceSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTraceSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTraceSearch failed: unknown result");
  }

  public function ShopcatsList($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_ShopcatsList($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_ShopcatsList();
  }

  public function send_ShopcatsList($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ShopcatsList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ShopcatsList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ShopcatsList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ShopcatsList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ShopcatsList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ShopcatsList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ShopcatsList failed: unknown result");
  }

  public function ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ItemsListGet();
  }

  public function send_ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsListGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsListGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsListGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsListGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsListGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsListGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsListGet failed: unknown result");
  }

  public function FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_FenxiaoOrdersGet();
  }

  public function send_FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoOrdersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoOrdersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoOrdersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoOrdersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoOrdersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoOrdersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoOrdersGet failed: unknown result");
  }

  public function getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getAddress();
  }

  public function send_getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getAddress_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAddress', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAddress', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAddress()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getAddress_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getAddress_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAddress failed: unknown result");
  }

  public function getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLogisticsOrdersEx();
  }

  public function send_getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrdersEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrdersEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrdersEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrdersEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrdersEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrdersEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrdersEx failed: unknown result");
  }

  public function RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_RateListAdd();
  }

  public function send_RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RateListAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RateListAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RateListAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RateListAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RateListAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RateListAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RateListAdd failed: unknown result");
  }

  public function TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradeClose();
  }

  public function send_TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeClose_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeClose', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeClose', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeClose()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeClose_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeClose_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeClose failed: unknown result");
  }

  public function TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_TopatsUserApGet();
  }

  public function send_TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TopatsUserApGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TopatsUserApGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TopatsUserApGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TopatsUserApGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TopatsUserApGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TopatsUserApGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TopatsUserApGet failed: unknown result");
  }

  public function tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_tradeFullinfoEX();
  }

  public function send_tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_tradeFullinfoEX_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tradeFullinfoEX', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tradeFullinfoEX', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tradeFullinfoEX()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_tradeFullinfoEX_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_tradeFullinfoEX_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("tradeFullinfoEX failed: unknown result");
  }

  public function TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradeReceivetimeDelay();
  }

  public function send_TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeReceivetimeDelay_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeReceivetimeDelay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeReceivetimeDelay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeReceivetimeDelay()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeReceivetimeDelay_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeReceivetimeDelay_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeReceivetimeDelay failed: unknown result");
  }

  public function VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_VasOrderSearch();
  }

  public function send_VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_VasOrderSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'VasOrderSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('VasOrderSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_VasOrderSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_VasOrderSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_VasOrderSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("VasOrderSearch failed: unknown result");
  }

  public function VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_VasSubscSearch();
  }

  public function send_VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_VasSubscSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'VasSubscSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('VasSubscSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_VasSubscSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_VasSubscSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_VasSubscSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("VasSubscSearch failed: unknown result");
  }

  public function getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_getSellerUser();
  }

  public function send_getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getSellerUser_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSellerUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSellerUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSellerUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getSellerUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getSellerUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSellerUser failed: unknown result");
  }

  public function refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_refundsingOrders();
  }

  public function send_refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundsingOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundsingOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundsingOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundsingOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundsingOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundsingOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundsingOrders failed: unknown result");
  }

  public function WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_WwGroupmemberGet();
  }

  public function send_WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwGroupmemberGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwGroupmemberGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwGroupmemberGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwGroupmemberGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwGroupmemberGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwGroupmemberGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwGroupmemberGet failed: unknown result");
  }

  public function ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ItemGet();
  }

  public function send_ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemGet failed: unknown result");
  }

  public function ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_ItemsOnsaleSearchEx();
  }

  public function send_ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsOnsaleSearchEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsOnsaleSearchEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsOnsaleSearchEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsOnsaleSearchEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsOnsaleSearchEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsOnsaleSearchEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsOnsaleSearchEx failed: unknown result");
  }

  public function WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwNoreplynumGet();
  }

  public function send_WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwNoreplynumGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwNoreplynumGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwNoreplynumGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwNoreplynumGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwNoreplynumGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwNoreplynumGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwNoreplynumGet failed: unknown result");
  }

  public function itemProcessShieldsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_itemProcessShieldsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_itemProcessShieldsSearch();
  }

  public function send_itemProcessShieldsSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemProcessShieldsSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemProcessShieldsSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemProcessShieldsSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemProcessShieldsSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemProcessShieldsSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemProcessShieldsSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemProcessShieldsSearch failed: unknown result");
  }

  public function TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TopatsGet();
  }

  public function send_TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TopatsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TopatsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TopatsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TopatsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TopatsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TopatsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TopatsGet failed: unknown result");
  }

  public function CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_CompaniesGet();
  }

  public function send_CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_CompaniesGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CompaniesGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CompaniesGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CompaniesGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_CompaniesGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_CompaniesGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("CompaniesGet failed: unknown result");
  }

  public function Dsqlupdate($parm0, $clientinfo)
  {
    $this->send_Dsqlupdate($parm0, $clientinfo);
    return $this->recv_Dsqlupdate();
  }

  public function send_Dsqlupdate($parm0, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Dsqlupdate_args();
    $args->parm0 = $parm0;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Dsqlupdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Dsqlupdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Dsqlupdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Dsqlupdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Dsqlupdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Dsqlupdate failed: unknown result");
  }

  public function updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_updatePrice();
  }

  public function send_updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_updatePrice_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePrice()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_updatePrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_updatePrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePrice failed: unknown result");
  }

  public function updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_updatePriceNew();
  }

  public function send_updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_updatePriceNew_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePriceNew', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePriceNew', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePriceNew()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_updatePriceNew_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_updatePriceNew_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePriceNew failed: unknown result");
  }

  public function lightState($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_lightState($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_lightState();
  }

  public function send_lightState($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_lightState_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lightState', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lightState', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lightState()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_lightState_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_lightState_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("lightState failed: unknown result");
  }

  public function getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLocation();
  }

  public function send_getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLocation_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLocation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLocation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLocation()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLocation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLocation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLocation failed: unknown result");
  }

  public function DesUpackLogin($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUpackLogin($parm0, $parm1, $clientinfo);
    return $this->recv_DesUpackLogin();
  }

  public function send_DesUpackLogin($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUpackLogin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUpackLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUpackLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUpackLogin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUpackLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUpackLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUpackLogin failed: unknown result");
  }

  public function DesUpackLoginIphone($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUpackLoginIphone($parm0, $parm1, $clientinfo);
    return $this->recv_DesUpackLoginIphone();
  }

  public function send_DesUpackLoginIphone($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUpackLoginIphone_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUpackLoginIphone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUpackLoginIphone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUpackLoginIphone()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUpackLoginIphone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUpackLoginIphone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUpackLoginIphone failed: unknown result");
  }

  public function DesEncrypt($parm0, $parm1, $clientinfo)
  {
    $this->send_DesEncrypt($parm0, $parm1, $clientinfo);
    return $this->recv_DesEncrypt();
  }

  public function send_DesEncrypt($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesEncrypt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesEncrypt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesEncrypt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesEncrypt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesEncrypt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesEncrypt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesEncrypt failed: unknown result");
  }

  public function DesUnEncrypt($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUnEncrypt($parm0, $parm1, $clientinfo);
    return $this->recv_DesUnEncrypt();
  }

  public function send_DesUnEncrypt($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUnEncrypt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUnEncrypt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUnEncrypt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUnEncrypt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUnEncrypt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUnEncrypt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUnEncrypt failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class topapi_TopApiThrift_TradePostAgeUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradePostAgeUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradePostAgeUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradePostAgeUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradePostAgeUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradePostAgeUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::I32, 8);
      $xfer += $output->writeI32($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SerchRateList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SerchRateList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SerchRateList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SerchRateList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SerchRateList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SerchRateList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatpeersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatpeersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatpeersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatpeersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatpeersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatpeersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoLoginUserGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoLoginUserGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoLoginUserGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoLoginUserGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoLoginUserGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoLoginUserGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGetEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGetEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGetEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::I32, 12);
      $xfer += $output->writeI32($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::I32, 13);
      $xfer += $output->writeI32($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGetEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGetEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGetEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAppToken_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAppToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAppToken_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAppToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAppToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAppToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfo_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfo_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerStop_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerStop_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerStop_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerStop_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerStop_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerStop_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ScheOpt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ScheOpt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ScheOpt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ScheOpt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ScheOpt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ScheOpt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SkuUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SkuUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SkuUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 11);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SkuUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SkuUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SkuUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Address_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Address_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Address_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Address_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Address_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Address_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserAccountGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserAccountGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserAccountGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserAccountGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserAccountGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserAccountGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessAdviseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessAdviseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessAdviseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessAdviseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessAdviseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessAdviseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessShieldGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessShieldGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessShieldGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessShieldGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessShieldGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessShieldGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerPermit_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerPermit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerPermit_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerPermit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerPermit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerPermit_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsListAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsListAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsListAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsListAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsListAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsListAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayUserGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayUserGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayUserGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayUserGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayUserGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayUserGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_PostageUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_PostageUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_PostageUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_PostageUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_PostageUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_PostageUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OauthTokenGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OauthTokenGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OauthTokenGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OauthTokenGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OauthTokenGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OauthTokenGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwSubusersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwSubusersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwSubusersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwSubusersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwSubusersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwSubusersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::BOOL, 4);
      $xfer += $output->writeBool($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundGetEX_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundGetEX_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundGetEX_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundGetEX_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundGetEX_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundGetEX_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessWarnGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessWarnGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessWarnGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessWarnGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessWarnGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessWarnGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TqlOpt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TqlOpt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TqlOpt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TqlOpt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TqlOpt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TqlOpt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessTypeStat_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessTypeStat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessTypeStat_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessTypeStat_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessTypeStat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessTypeStat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUser_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUser_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OnlineSend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OnlineSend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OnlineSend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OnlineSend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OnlineSend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OnlineSend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSoldEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSoldEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSoldEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSoldEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSoldEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSoldEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessAdvisesSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessAdvisesSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessAdvisesSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessAdvisesSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessAdvisesSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessAdvisesSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrdersEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrdersEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrdersEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrdersEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrdersEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrdersEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessPunishGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessPunishGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessPunishGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessPunishGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessPunishGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessPunishGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_traderatesGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_traderatesGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_traderatesGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_traderatesGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_traderatesGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_traderatesGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatlogGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatlogGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatlogGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatlogGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatlogGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatlogGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OfflineSend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OfflineSend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OfflineSend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OfflineSend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OfflineSend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OfflineSend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSold_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSold_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSold_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::I32, 4);
      $xfer += $output->writeI32($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSold_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSold_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSold_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Priceupdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Priceupdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Priceupdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Priceupdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Priceupdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Priceupdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_autologin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_autologin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_autologin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_autologin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_autologin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_autologin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::BOOL, 11);
      $xfer += $output->writeBool($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::BOOL, 12);
      $xfer += $output->writeBool($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TaskDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TaskDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TaskDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TaskDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TaskDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TaskDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getShop_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getShop_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getShop_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getShop_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getShop_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getShop_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessPunishesSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessPunishesSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessPunishesSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessPunishesSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessPunishesSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessPunishesSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserTradeSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserTradeSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserTradeSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserTradeSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserTradeSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserTradeSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersDetail_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersDetail_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::BOOL, 6);
      $xfer += $output->writeBool($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersMessageAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersMessageAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersMessageAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersMessageAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersMessageAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLoginNew_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLoginNew_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLoginNew_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLoginNew_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLoginNew_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLoginNew_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatrecordGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatrecordGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatrecordGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatrecordGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatrecordGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatrecordGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopRemainShowCase_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopRemainShowCase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopRemainShowCase_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopRemainShowCase_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopRemainShowCase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopRemainShowCase_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateDelisting_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateDelisting_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateDelisting_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateDelisting_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateDelisting_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateDelisting_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessRuletypeStat_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessRuletypeStat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessRuletypeStat_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessRuletypeStat_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessRuletypeStat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessRuletypeStat_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AddressUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AddressUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AddressUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AddressUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AddressUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AddressUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserContractGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserContractGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserContractGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserContractGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserContractGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserContractGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SubscribeGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SubscribeGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SubscribeGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SubscribeGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SubscribeGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SubscribeGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UmpPromotionGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UmpPromotionGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UmpPromotionGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UmpPromotionGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UmpPromotionGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UmpPromotionGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwReceivenumGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwReceivenumGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwReceivenumGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwReceivenumGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwReceivenumGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwReceivenumGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLogin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLogin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLogin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLogin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLogin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLogin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUsers_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUsers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUsers_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUsers_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUsers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUsers_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateListing_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateListing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateListing_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateListing_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateListing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateListing_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsOnsale_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsOnsale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsOnsale_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsOnsale_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsOnsale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsOnsale_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_waitBuyerPayOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_waitBuyerPayOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_waitBuyerPayOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_waitBuyerPayOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_waitBuyerPayOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_waitBuyerPayOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_JushitaJdpUserAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_JushitaJdpUserAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_JushitaJdpUserAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_JushitaJdpUserAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_JushitaJdpUserAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_JushitaJdpUserAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundRefuse_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundRefuse_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundRefuse_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundRefuse_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundRefuse_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundRefuse_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayOauthTokenGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayOauthTokenGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayOauthTokenGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayOauthTokenGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayOauthTokenGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayOauthTokenGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsOrdersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsOrdersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsOrdersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsOrdersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsOrdersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsOrdersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_newAddress_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_newAddress_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_newAddress_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_newAddress_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_newAddress_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_newAddress_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessWarnsSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessWarnsSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessWarnsSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessWarnsSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessWarnsSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessWarnsSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_LogisticsConsignResend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_LogisticsConsignResend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_LogisticsConsignResend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_LogisticsConsignResend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_LogisticsConsignResend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_LogisticsConsignResend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeShipAddressUpdatetrade_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeShipAddressUpdatetrade_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeShipAddressUpdatetrade_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeShipAddressUpdatetrade_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeShipAddressUpdatetrade_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeShipAddressUpdatetrade_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DummySend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DummySend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DummySend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DummySend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DummySend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DummySend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Dsqlquery_args {
  static $_TSPEC;

  public $parm0 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Dsqlquery_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Dsqlquery_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 2);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Dsqlquery_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Dsqlquery_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Dsqlquery_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTraceSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTraceSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTraceSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTraceSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTraceSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTraceSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopcatsList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopcatsList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopcatsList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopcatsList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopcatsList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopcatsList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsListGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsListGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsListGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsListGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsListGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsListGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAddress_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAddress_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAddress_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAddress_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAddress_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAddress_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateListAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateListAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateListAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::BOOL, 5);
      $xfer += $output->writeBool($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateListAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateListAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateListAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeClose_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeClose_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeClose_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeClose_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeClose_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeClose_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsUserApGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsUserApGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsUserApGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsUserApGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsUserApGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsUserApGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfoEX_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfoEX_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfoEX_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfoEX_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfoEX_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfoEX_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeReceivetimeDelay_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeReceivetimeDelay_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeReceivetimeDelay_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeReceivetimeDelay_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeReceivetimeDelay_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeReceivetimeDelay_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasOrderSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasOrderSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasOrderSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasOrderSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasOrderSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasOrderSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasSubscSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasSubscSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasSubscSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasSubscSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasSubscSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasSubscSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getSellerUser_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getSellerUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getSellerUser_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getSellerUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getSellerUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getSellerUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::I32, 4);
      $xfer += $output->writeI32($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwGroupmemberGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwGroupmemberGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwGroupmemberGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwGroupmemberGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwGroupmemberGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwGroupmemberGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearchEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearchEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearchEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::I32, 12);
      $xfer += $output->writeI32($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::I32, 13);
      $xfer += $output->writeI32($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearchEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearchEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearchEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwNoreplynumGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwNoreplynumGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwNoreplynumGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwNoreplynumGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwNoreplynumGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwNoreplynumGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessShieldsSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessShieldsSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessShieldsSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemProcessShieldsSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemProcessShieldsSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemProcessShieldsSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CompaniesGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CompaniesGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CompaniesGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CompaniesGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CompaniesGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CompaniesGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Dsqlupdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Dsqlupdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Dsqlupdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 2);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Dsqlupdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Dsqlupdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Dsqlupdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePrice_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePrice_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePrice_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePrice_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePriceNew_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePriceNew_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePriceNew_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePriceNew_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePriceNew_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePriceNew_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_lightState_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_lightState_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_lightState_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_lightState_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_lightState_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_lightState_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLocation_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLocation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLocation_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLocation_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLocation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLocation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLogin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLogin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLogin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLogin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLogin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLogin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLoginIphone_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLoginIphone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLoginIphone_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLoginIphone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLoginIphone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLoginIphone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesEncrypt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesEncrypt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesEncrypt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesEncrypt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesEncrypt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesEncrypt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUnEncrypt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUnEncrypt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUnEncrypt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUnEncrypt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUnEncrypt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUnEncrypt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
