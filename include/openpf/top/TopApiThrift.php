<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once 'TopApi_types.php';

interface topapi_TopApiThriftIf {
  public function rptCampaigneffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function campaignScheduleUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo);
  public function ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function creativeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function tradeFullinfo($parm0, $parm1, $parm2, $clientinfo);
  public function incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo);
  public function ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
  public function Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function UserAccountGet($parm0, $parm1, $parm2, $clientinfo);
  public function campaignAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo);
  public function ItemUpdatePic($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function crmMembersSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $clientinfo);
  public function AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function userBuyerGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function insightWordscatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function adgroupsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function itemsTopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function insightCatsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function campaignScheduleGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function taobaokeShopsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $clientinfo);
  public function creativeGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function campaignPlatformGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function loginAuthsignGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function insightToplevelcatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function accountBalanceGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function rptAdgroupkeywordbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function adgroupCatmatchGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function campaignAreaUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function rptAdgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function campaignsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function keywordsDelete($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function ItemUpdateXe($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function campaignAreaGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function taobaokeReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function adgroupidsDeletedGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function adgroupDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function taobaokeItemsCouponGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $parm25, $parm26, $clientinfo);
  public function insightCatstopwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function campaignPlatformUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function deliveryTemplateGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function rptCampaignbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function campaignAreaoptionsGet($parm0, $parm1, $parm2, $clientinfo);
  public function adgroupsItemExist($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function creativeDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo);
  public function campaignBudgetUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function rptAdgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function deliveryTemplateUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function campaignChanneloptionsGet($parm0, $parm1, $parm2, $clientinfo);
  public function adgroupOnlineitemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function UserContractGet($parm0, $parm1, $parm2, $clientinfo);
  public function CatsListUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function crmMembersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function insightCatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function insightWordsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function adgroupCatmatchGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function rptCampadgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function logisticsAddressRemove($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function keywordsQscoreSet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function keywordsAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function rptAdgroupcreativebaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function ItemUpdateLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $clientinfo);
  public function getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ShopcatsList($parm0, $parm1, $parm2, $clientinfo);
  public function creativeAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function insightCatsrelatedwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function adgroupCatmatchUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
  public function adgroupAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function keywordsRecommendGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
  public function getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function taobaokeItemsDetailGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function campaignUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function keywordsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function keywordsPriceSet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function campaignBudgetGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function taobaokeRebateReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function adgroupUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
  public function adgroupCampcatmatchsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function adgroupNonsearchstatesUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function rptAdgroupkeywordeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
  public function ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
  public function itemUpdateEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function rptCampadgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
  public function CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
  public function insightWordsanalysisGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
  public function updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
  public function updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
  public function lightState($parm0, $parm1, $parm2, $clientinfo);
  public function udpShopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
  public function udpItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
  public function DesUpackLogin($parm0, $parm1, $clientinfo);
  public function DesUpackLoginIphone($parm0, $parm1, $clientinfo);
  public function DesEncrypt($parm0, $parm1, $clientinfo);
  public function DesUnEncrypt($parm0, $parm1, $clientinfo);
}

class topapi_TopApiThriftClient implements topapi_TopApiThriftIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function rptCampaigneffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_rptCampaigneffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_rptCampaigneffectGet();
  }

  public function send_rptCampaigneffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptCampaigneffectGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptCampaigneffectGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptCampaigneffectGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptCampaigneffectGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptCampaigneffectGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptCampaigneffectGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptCampaigneffectGet failed: unknown result");
  }

  public function TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradePostAgeUpdate();
  }

  public function send_TradePostAgeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradePostAgeUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradePostAgeUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradePostAgeUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradePostAgeUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradePostAgeUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradePostAgeUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradePostAgeUpdate failed: unknown result");
  }

  public function ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_ItemsInventorGet();
  }

  public function send_ItemsInventorGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsInventorGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsInventorGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsInventorGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsInventorGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsInventorGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsInventorGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsInventorGet failed: unknown result");
  }

  public function SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_SellerCatsList();
  }

  public function send_SellerCatsList($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SellerCatsList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SellerCatsList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SellerCatsList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SellerCatsList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SellerCatsList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SellerCatsList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SellerCatsList failed: unknown result");
  }

  public function SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_SerchRateList();
  }

  public function send_SerchRateList($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SerchRateList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SerchRateList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SerchRateList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SerchRateList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SerchRateList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SerchRateList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SerchRateList failed: unknown result");
  }

  public function campaignScheduleUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_campaignScheduleUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_campaignScheduleUpdate();
  }

  public function send_campaignScheduleUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignScheduleUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignScheduleUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignScheduleUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignScheduleUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignScheduleUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignScheduleUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignScheduleUpdate failed: unknown result");
  }

  public function WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_WwChatpeersGet();
  }

  public function send_WwChatpeersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatpeersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatpeersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatpeersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatpeersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatpeersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatpeersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatpeersGet failed: unknown result");
  }

  public function FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_FenxiaoLoginUserGet();
  }

  public function send_FenxiaoLoginUserGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoLoginUserGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoLoginUserGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoLoginUserGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoLoginUserGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoLoginUserGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoLoginUserGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoLoginUserGet failed: unknown result");
  }

  public function ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_ItemsInventorGetEx();
  }

  public function send_ItemsInventorGetEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsInventorGetEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsInventorGetEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsInventorGetEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsInventorGetEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsInventorGetEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsInventorGetEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsInventorGetEx failed: unknown result");
  }

  public function ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemRecommendAdd();
  }

  public function send_ItemRecommendAdd($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemRecommendAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemRecommendAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemRecommendAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemRecommendAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemRecommendAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemRecommendAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemRecommendAdd failed: unknown result");
  }

  public function getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getLogisticsOrders();
  }

  public function send_getLogisticsOrders($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrders failed: unknown result");
  }

  public function creativeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_creativeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_creativeUpdate();
  }

  public function send_creativeUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_creativeUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'creativeUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('creativeUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_creativeUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_creativeUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_creativeUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("creativeUpdate failed: unknown result");
  }

  public function getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getAppToken();
  }

  public function send_getAppToken($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getAppToken_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAppToken', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAppToken', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAppToken()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getAppToken_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getAppToken_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAppToken failed: unknown result");
  }

  public function tradeFullinfo($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_tradeFullinfo($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_tradeFullinfo();
  }

  public function send_tradeFullinfo($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_tradeFullinfo_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tradeFullinfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tradeFullinfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tradeFullinfo()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_tradeFullinfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_tradeFullinfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("tradeFullinfo failed: unknown result");
  }

  public function incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_incrementCustomerStop();
  }

  public function send_incrementCustomerStop($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_incrementCustomerStop_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'incrementCustomerStop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('incrementCustomerStop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_incrementCustomerStop()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_incrementCustomerStop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_incrementCustomerStop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("incrementCustomerStop failed: unknown result");
  }

  public function ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ScheOpt();
  }

  public function send_ScheOpt($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ScheOpt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ScheOpt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ScheOpt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ScheOpt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ScheOpt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ScheOpt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ScheOpt failed: unknown result");
  }

  public function SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $this->send_SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
    return $this->recv_SkuUpdate();
  }

  public function send_SkuUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SkuUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SkuUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SkuUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SkuUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SkuUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SkuUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SkuUpdate failed: unknown result");
  }

  public function Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_Address();
  }

  public function send_Address($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Address_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Address', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Address', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Address()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Address_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Address_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Address failed: unknown result");
  }

  public function UserAccountGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_UserAccountGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_UserAccountGet();
  }

  public function send_UserAccountGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserAccountGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserAccountGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserAccountGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserAccountGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserAccountGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserAccountGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserAccountGet failed: unknown result");
  }

  public function campaignAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_campaignAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_campaignAdd();
  }

  public function send_campaignAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignAdd failed: unknown result");
  }

  public function incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_incrementCustomerPermit();
  }

  public function send_incrementCustomerPermit($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_incrementCustomerPermit_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'incrementCustomerPermit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('incrementCustomerPermit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_incrementCustomerPermit()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_incrementCustomerPermit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_incrementCustomerPermit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("incrementCustomerPermit failed: unknown result");
  }

  public function ItemUpdatePic($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ItemUpdatePic($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ItemUpdatePic();
  }

  public function send_ItemUpdatePic($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemUpdatePic_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemUpdatePic', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemUpdatePic', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemUpdatePic()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemUpdatePic_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemUpdatePic_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemUpdatePic failed: unknown result");
  }

  public function SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_SellerCatsListAdd();
  }

  public function send_SellerCatsListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SellerCatsListAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SellerCatsListAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SellerCatsListAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SellerCatsListAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SellerCatsListAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SellerCatsListAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SellerCatsListAdd failed: unknown result");
  }

  public function crmMembersSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $clientinfo)
  {
    $this->send_crmMembersSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $clientinfo);
    return $this->recv_crmMembersSearch();
  }

  public function send_crmMembersSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $clientinfo)
  {
    $args = new topapi_TopApiThrift_crmMembersSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->parm16 = $parm16;
    $args->parm17 = $parm17;
    $args->parm18 = $parm18;
    $args->parm19 = $parm19;
    $args->parm20 = $parm20;
    $args->parm21 = $parm21;
    $args->parm22 = $parm22;
    $args->parm23 = $parm23;
    $args->parm24 = $parm24;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'crmMembersSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('crmMembersSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_crmMembersSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_crmMembersSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_crmMembersSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("crmMembersSearch failed: unknown result");
  }

  public function AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_AlipayUserGet();
  }

  public function send_AlipayUserGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AlipayUserGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AlipayUserGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AlipayUserGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AlipayUserGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AlipayUserGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AlipayUserGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AlipayUserGet failed: unknown result");
  }

  public function RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_RefundMessageGet();
  }

  public function send_RefundMessageGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundMessageGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundMessageGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundMessageGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundMessageGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundMessageGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundMessageGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundMessageGet failed: unknown result");
  }

  public function userBuyerGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_userBuyerGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_userBuyerGet();
  }

  public function send_userBuyerGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_userBuyerGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'userBuyerGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('userBuyerGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_userBuyerGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_userBuyerGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_userBuyerGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("userBuyerGet failed: unknown result");
  }

  public function insightWordscatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_insightWordscatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_insightWordscatsGet();
  }

  public function send_insightWordscatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightWordscatsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightWordscatsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightWordscatsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightWordscatsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightWordscatsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightWordscatsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightWordscatsGet failed: unknown result");
  }

  public function adgroupsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_adgroupsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_adgroupsGet();
  }

  public function send_adgroupsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupsGet failed: unknown result");
  }

  public function OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_OauthTokenGet();
  }

  public function send_OauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OauthTokenGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OauthTokenGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OauthTokenGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OauthTokenGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OauthTokenGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OauthTokenGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OauthTokenGet failed: unknown result");
  }

  public function PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_PostageUpdate();
  }

  public function send_PostageUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_PostageUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'PostageUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('PostageUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_PostageUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_PostageUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_PostageUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("PostageUpdate failed: unknown result");
  }

  public function WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_WwSubusersGet();
  }

  public function send_WwSubusersGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwSubusersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwSubusersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwSubusersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwSubusersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwSubusersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwSubusersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwSubusersGet failed: unknown result");
  }

  public function TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_TradeMemoUpdate();
  }

  public function send_TradeMemoUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeMemoUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeMemoUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeMemoUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeMemoUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeMemoUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeMemoUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeMemoUpdate failed: unknown result");
  }

  public function itemsTopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_itemsTopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_itemsTopGet();
  }

  public function send_itemsTopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemsTopGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemsTopGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemsTopGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemsTopGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemsTopGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemsTopGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemsTopGet failed: unknown result");
  }

  public function insightCatsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_insightCatsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_insightCatsbaseGet();
  }

  public function send_insightCatsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightCatsbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightCatsbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightCatsbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightCatsbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightCatsbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightCatsbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightCatsbaseGet failed: unknown result");
  }

  public function campaignScheduleGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_campaignScheduleGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_campaignScheduleGet();
  }

  public function send_campaignScheduleGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignScheduleGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignScheduleGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignScheduleGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignScheduleGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignScheduleGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignScheduleGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignScheduleGet failed: unknown result");
  }

  public function refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_refundGetEX();
  }

  public function send_refundGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundGetEX_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundGetEX', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundGetEX', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundGetEX()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundGetEX_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundGetEX_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundGetEX failed: unknown result");
  }

  public function RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_RefundGet();
  }

  public function send_RefundGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundGet failed: unknown result");
  }

  public function taobaokeShopsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $clientinfo)
  {
    $this->send_taobaokeShopsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $clientinfo);
    return $this->recv_taobaokeShopsGet();
  }

  public function send_taobaokeShopsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $clientinfo)
  {
    $args = new topapi_TopApiThrift_taobaokeShopsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->parm16 = $parm16;
    $args->parm17 = $parm17;
    $args->parm18 = $parm18;
    $args->parm19 = $parm19;
    $args->parm20 = $parm20;
    $args->parm21 = $parm21;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'taobaokeShopsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('taobaokeShopsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_taobaokeShopsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_taobaokeShopsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_taobaokeShopsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("taobaokeShopsGet failed: unknown result");
  }

  public function creativeGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_creativeGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_creativeGet();
  }

  public function send_creativeGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_creativeGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'creativeGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('creativeGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_creativeGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_creativeGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_creativeGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("creativeGet failed: unknown result");
  }

  public function campaignPlatformGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_campaignPlatformGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_campaignPlatformGet();
  }

  public function send_campaignPlatformGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignPlatformGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignPlatformGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignPlatformGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignPlatformGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignPlatformGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignPlatformGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignPlatformGet failed: unknown result");
  }

  public function loginAuthsignGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_loginAuthsignGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_loginAuthsignGet();
  }

  public function send_loginAuthsignGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_loginAuthsignGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'loginAuthsignGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('loginAuthsignGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_loginAuthsignGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_loginAuthsignGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_loginAuthsignGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("loginAuthsignGet failed: unknown result");
  }

  public function insightToplevelcatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_insightToplevelcatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_insightToplevelcatsGet();
  }

  public function send_insightToplevelcatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightToplevelcatsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightToplevelcatsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightToplevelcatsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightToplevelcatsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightToplevelcatsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightToplevelcatsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightToplevelcatsGet failed: unknown result");
  }

  public function accountBalanceGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_accountBalanceGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_accountBalanceGet();
  }

  public function send_accountBalanceGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_accountBalanceGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'accountBalanceGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('accountBalanceGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_accountBalanceGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_accountBalanceGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_accountBalanceGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("accountBalanceGet failed: unknown result");
  }

  public function TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TqlOpt();
  }

  public function send_TqlOpt($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TqlOpt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TqlOpt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TqlOpt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TqlOpt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TqlOpt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TqlOpt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TqlOpt failed: unknown result");
  }

  public function rptAdgroupkeywordbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_rptAdgroupkeywordbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_rptAdgroupkeywordbaseGet();
  }

  public function send_rptAdgroupkeywordbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptAdgroupkeywordbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptAdgroupkeywordbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptAdgroupkeywordbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptAdgroupkeywordbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptAdgroupkeywordbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptAdgroupkeywordbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptAdgroupkeywordbaseGet failed: unknown result");
  }

  public function adgroupCatmatchGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_adgroupCatmatchGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_adgroupCatmatchGet();
  }

  public function send_adgroupCatmatchGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupCatmatchGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupCatmatchGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupCatmatchGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupCatmatchGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupCatmatchGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupCatmatchGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupCatmatchGet failed: unknown result");
  }

  public function getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getUser();
  }

  public function send_getUser($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getUser_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUser failed: unknown result");
  }

  public function OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_OnlineSend();
  }

  public function send_OnlineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OnlineSend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OnlineSend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OnlineSend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OnlineSend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OnlineSend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OnlineSend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OnlineSend failed: unknown result");
  }

  public function getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_getTradesSoldEx();
  }

  public function send_getTradesSoldEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTradesSoldEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTradesSoldEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTradesSoldEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTradesSoldEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTradesSoldEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTradesSoldEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTradesSoldEx failed: unknown result");
  }

  public function campaignAreaUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_campaignAreaUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_campaignAreaUpdate();
  }

  public function send_campaignAreaUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignAreaUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignAreaUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignAreaUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignAreaUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignAreaUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignAreaUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignAreaUpdate failed: unknown result");
  }

  public function refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_refundsingOrdersEx();
  }

  public function send_refundsingOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundsingOrdersEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundsingOrdersEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundsingOrdersEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundsingOrdersEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundsingOrdersEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundsingOrdersEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundsingOrdersEx failed: unknown result");
  }

  public function traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_traderatesGet();
  }

  public function send_traderatesGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_traderatesGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'traderatesGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('traderatesGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_traderatesGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_traderatesGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_traderatesGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("traderatesGet failed: unknown result");
  }

  public function WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_WwChatlogGet();
  }

  public function send_WwChatlogGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatlogGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatlogGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatlogGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatlogGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatlogGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatlogGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatlogGet failed: unknown result");
  }

  public function rptAdgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_rptAdgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_rptAdgroupbaseGet();
  }

  public function send_rptAdgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptAdgroupbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptAdgroupbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptAdgroupbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptAdgroupbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptAdgroupbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptAdgroupbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptAdgroupbaseGet failed: unknown result");
  }

  public function campaignsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_campaignsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_campaignsGet();
  }

  public function send_campaignsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignsGet failed: unknown result");
  }

  public function keywordsDelete($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_keywordsDelete($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_keywordsDelete();
  }

  public function send_keywordsDelete($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsDelete failed: unknown result");
  }

  public function ItemUpdateXe($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_ItemUpdateXe($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_ItemUpdateXe();
  }

  public function send_ItemUpdateXe($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemUpdateXe_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemUpdateXe', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemUpdateXe', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemUpdateXe()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemUpdateXe_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemUpdateXe_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemUpdateXe failed: unknown result");
  }

  public function OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_OfflineSend();
  }

  public function send_OfflineSend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_OfflineSend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'OfflineSend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('OfflineSend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_OfflineSend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_OfflineSend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_OfflineSend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("OfflineSend failed: unknown result");
  }

  public function getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getItemsGet();
  }

  public function send_getItemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getItemsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getItemsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getItemsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getItemsGet failed: unknown result");
  }

  public function campaignAreaGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_campaignAreaGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_campaignAreaGet();
  }

  public function send_campaignAreaGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignAreaGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignAreaGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignAreaGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignAreaGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignAreaGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignAreaGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignAreaGet failed: unknown result");
  }

  public function taobaokeReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_taobaokeReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_taobaokeReportGet();
  }

  public function send_taobaokeReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_taobaokeReportGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'taobaokeReportGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('taobaokeReportGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_taobaokeReportGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_taobaokeReportGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_taobaokeReportGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("taobaokeReportGet failed: unknown result");
  }

  public function getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_getTradesSold();
  }

  public function send_getTradesSold($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTradesSold_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTradesSold', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTradesSold', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTradesSold()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTradesSold_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTradesSold_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTradesSold failed: unknown result");
  }

  public function adgroupidsDeletedGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_adgroupidsDeletedGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_adgroupidsDeletedGet();
  }

  public function send_adgroupidsDeletedGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupidsDeletedGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupidsDeletedGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupidsDeletedGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupidsDeletedGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupidsDeletedGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupidsDeletedGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupidsDeletedGet failed: unknown result");
  }

  public function adgroupDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_adgroupDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_adgroupDelete();
  }

  public function send_adgroupDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupDelete failed: unknown result");
  }

  public function ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemDelete();
  }

  public function send_ItemDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemDelete failed: unknown result");
  }

  public function taobaokeItemsCouponGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $parm25, $parm26, $clientinfo)
  {
    $this->send_taobaokeItemsCouponGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $parm25, $parm26, $clientinfo);
    return $this->recv_taobaokeItemsCouponGet();
  }

  public function send_taobaokeItemsCouponGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $parm17, $parm18, $parm19, $parm20, $parm21, $parm22, $parm23, $parm24, $parm25, $parm26, $clientinfo)
  {
    $args = new topapi_TopApiThrift_taobaokeItemsCouponGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->parm16 = $parm16;
    $args->parm17 = $parm17;
    $args->parm18 = $parm18;
    $args->parm19 = $parm19;
    $args->parm20 = $parm20;
    $args->parm21 = $parm21;
    $args->parm22 = $parm22;
    $args->parm23 = $parm23;
    $args->parm24 = $parm24;
    $args->parm25 = $parm25;
    $args->parm26 = $parm26;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'taobaokeItemsCouponGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('taobaokeItemsCouponGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_taobaokeItemsCouponGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_taobaokeItemsCouponGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_taobaokeItemsCouponGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("taobaokeItemsCouponGet failed: unknown result");
  }

  public function insightCatstopwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_insightCatstopwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_insightCatstopwordGet();
  }

  public function send_insightCatstopwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightCatstopwordGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightCatstopwordGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightCatstopwordGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightCatstopwordGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightCatstopwordGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightCatstopwordGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightCatstopwordGet failed: unknown result");
  }

  public function campaignPlatformUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_campaignPlatformUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_campaignPlatformUpdate();
  }

  public function send_campaignPlatformUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignPlatformUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignPlatformUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignPlatformUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignPlatformUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignPlatformUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignPlatformUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignPlatformUpdate failed: unknown result");
  }

  public function Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_Priceupdate();
  }

  public function send_Priceupdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_Priceupdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'Priceupdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('Priceupdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_Priceupdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_Priceupdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_Priceupdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("Priceupdate failed: unknown result");
  }

  public function autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_autologin();
  }

  public function send_autologin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_autologin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'autologin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('autologin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_autologin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_autologin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_autologin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("autologin failed: unknown result");
  }

  public function ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_ItemUpdate();
  }

  public function send_ItemUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemUpdate failed: unknown result");
  }

  public function TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TaskDelete();
  }

  public function send_TaskDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TaskDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TaskDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TaskDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TaskDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TaskDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TaskDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TaskDelete failed: unknown result");
  }

  public function deliveryTemplateGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_deliveryTemplateGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_deliveryTemplateGet();
  }

  public function send_deliveryTemplateGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_deliveryTemplateGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deliveryTemplateGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deliveryTemplateGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deliveryTemplateGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_deliveryTemplateGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_deliveryTemplateGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("deliveryTemplateGet failed: unknown result");
  }

  public function rptCampaignbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_rptCampaignbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_rptCampaignbaseGet();
  }

  public function send_rptCampaignbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptCampaignbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptCampaignbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptCampaignbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptCampaignbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptCampaignbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptCampaignbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptCampaignbaseGet failed: unknown result");
  }

  public function campaignAreaoptionsGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_campaignAreaoptionsGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_campaignAreaoptionsGet();
  }

  public function send_campaignAreaoptionsGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignAreaoptionsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignAreaoptionsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignAreaoptionsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignAreaoptionsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignAreaoptionsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignAreaoptionsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignAreaoptionsGet failed: unknown result");
  }

  public function adgroupsItemExist($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_adgroupsItemExist($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_adgroupsItemExist();
  }

  public function send_adgroupsItemExist($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupsItemExist_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupsItemExist', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupsItemExist', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupsItemExist()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupsItemExist_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupsItemExist_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupsItemExist failed: unknown result");
  }

  public function getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getShop();
  }

  public function send_getShop($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getShop_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getShop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getShop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getShop()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getShop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getShop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getShop failed: unknown result");
  }

  public function UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_UserTradeSearch();
  }

  public function send_UserTradeSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserTradeSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserTradeSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserTradeSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserTradeSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserTradeSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserTradeSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserTradeSearch failed: unknown result");
  }

  public function getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLogisticsOrdersDetail();
  }

  public function send_getLogisticsOrdersDetail($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrdersDetail_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrdersDetail', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrdersDetail', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrdersDetail()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrdersDetail_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrdersDetail_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrdersDetail failed: unknown result");
  }

  public function RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_RateAdd();
  }

  public function send_RateAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RateAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RateAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RateAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RateAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RateAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RateAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RateAdd failed: unknown result");
  }

  public function creativeDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_creativeDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_creativeDelete();
  }

  public function send_creativeDelete($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_creativeDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'creativeDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('creativeDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_creativeDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_creativeDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_creativeDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("creativeDelete failed: unknown result");
  }

  public function FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_FenxiaoOrdersMessageAdd();
  }

  public function send_FenxiaoOrdersMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoOrdersMessageAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoOrdersMessageAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoOrdersMessageAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoOrdersMessageAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoOrdersMessageAdd failed: unknown result");
  }

  public function topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_topLoginNew();
  }

  public function send_topLoginNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_topLoginNew_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'topLoginNew', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('topLoginNew', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_topLoginNew()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_topLoginNew_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_topLoginNew_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("topLoginNew failed: unknown result");
  }

  public function WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwChatrecordGet();
  }

  public function send_WwChatrecordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwChatrecordGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwChatrecordGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwChatrecordGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwChatrecordGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwChatrecordGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwChatrecordGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwChatrecordGet failed: unknown result");
  }

  public function ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_ShopRemainShowCase();
  }

  public function send_ShopRemainShowCase($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ShopRemainShowCase_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ShopRemainShowCase', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ShopRemainShowCase', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ShopRemainShowCase()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ShopRemainShowCase_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ShopRemainShowCase_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ShopRemainShowCase failed: unknown result");
  }

  public function campaignBudgetUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_campaignBudgetUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_campaignBudgetUpdate();
  }

  public function send_campaignBudgetUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignBudgetUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignBudgetUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignBudgetUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignBudgetUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignBudgetUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignBudgetUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignBudgetUpdate failed: unknown result");
  }

  public function rptAdgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_rptAdgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_rptAdgroupeffectGet();
  }

  public function send_rptAdgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptAdgroupeffectGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptAdgroupeffectGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptAdgroupeffectGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptAdgroupeffectGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptAdgroupeffectGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptAdgroupeffectGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptAdgroupeffectGet failed: unknown result");
  }

  public function deliveryTemplateUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_deliveryTemplateUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_deliveryTemplateUpdate();
  }

  public function send_deliveryTemplateUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_deliveryTemplateUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'deliveryTemplateUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('deliveryTemplateUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_deliveryTemplateUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_deliveryTemplateUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_deliveryTemplateUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("deliveryTemplateUpdate failed: unknown result");
  }

  public function UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_UpdateDelisting();
  }

  public function send_UpdateDelisting($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UpdateDelisting_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateDelisting', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateDelisting', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateDelisting()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UpdateDelisting_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UpdateDelisting_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UpdateDelisting failed: unknown result");
  }

  public function campaignChanneloptionsGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_campaignChanneloptionsGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_campaignChanneloptionsGet();
  }

  public function send_campaignChanneloptionsGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignChanneloptionsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignChanneloptionsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignChanneloptionsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignChanneloptionsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignChanneloptionsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignChanneloptionsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignChanneloptionsGet failed: unknown result");
  }

  public function adgroupOnlineitemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_adgroupOnlineitemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_adgroupOnlineitemsGet();
  }

  public function send_adgroupOnlineitemsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupOnlineitemsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupOnlineitemsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupOnlineitemsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupOnlineitemsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupOnlineitemsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupOnlineitemsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupOnlineitemsGet failed: unknown result");
  }

  public function AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_AddressUpdate();
  }

  public function send_AddressUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AddressUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AddressUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AddressUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AddressUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AddressUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AddressUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AddressUpdate failed: unknown result");
  }

  public function UserContractGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_UserContractGet($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_UserContractGet();
  }

  public function send_UserContractGet($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UserContractGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UserContractGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UserContractGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UserContractGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UserContractGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UserContractGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UserContractGet failed: unknown result");
  }

  public function CatsListUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_CatsListUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_CatsListUpdate();
  }

  public function send_CatsListUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_CatsListUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CatsListUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CatsListUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CatsListUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_CatsListUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_CatsListUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("CatsListUpdate failed: unknown result");
  }

  public function ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_ItemsOnsaleSearch();
  }

  public function send_ItemsOnsaleSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsOnsaleSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsOnsaleSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsOnsaleSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsOnsaleSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsOnsaleSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsOnsaleSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsOnsaleSearch failed: unknown result");
  }

  public function SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_SubscribeGet();
  }

  public function send_SubscribeGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_SubscribeGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SubscribeGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SubscribeGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_SubscribeGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_SubscribeGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_SubscribeGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("SubscribeGet failed: unknown result");
  }

  public function crmMembersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_crmMembersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_crmMembersGet();
  }

  public function send_crmMembersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_crmMembersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'crmMembersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('crmMembersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_crmMembersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_crmMembersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_crmMembersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("crmMembersGet failed: unknown result");
  }

  public function insightCatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_insightCatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_insightCatsGet();
  }

  public function send_insightCatsGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightCatsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightCatsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightCatsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightCatsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightCatsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightCatsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightCatsGet failed: unknown result");
  }

  public function UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_UmpPromotionGet();
  }

  public function send_UmpPromotionGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UmpPromotionGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UmpPromotionGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UmpPromotionGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UmpPromotionGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UmpPromotionGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UmpPromotionGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UmpPromotionGet failed: unknown result");
  }

  public function WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwReceivenumGet();
  }

  public function send_WwReceivenumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwReceivenumGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwReceivenumGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwReceivenumGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwReceivenumGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwReceivenumGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwReceivenumGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwReceivenumGet failed: unknown result");
  }

  public function topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_topLogin();
  }

  public function send_topLogin($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_topLogin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'topLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('topLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_topLogin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_topLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_topLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("topLogin failed: unknown result");
  }

  public function TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_TradeMemoAdd();
  }

  public function send_TradeMemoAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeMemoAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeMemoAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeMemoAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeMemoAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeMemoAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeMemoAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeMemoAdd failed: unknown result");
  }

  public function RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_RefundMessageAdd();
  }

  public function send_RefundMessageAdd($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundMessageAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundMessageAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundMessageAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundMessageAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundMessageAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundMessageAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundMessageAdd failed: unknown result");
  }

  public function getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getUsers();
  }

  public function send_getUsers($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getUsers_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getUsers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getUsers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getUsers()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getUsers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getUsers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getUsers failed: unknown result");
  }

  public function UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_UpdateListing();
  }

  public function send_UpdateListing($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_UpdateListing_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'UpdateListing', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('UpdateListing', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_UpdateListing()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_UpdateListing_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_UpdateListing_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("UpdateListing failed: unknown result");
  }

  public function getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getItemsOnsale();
  }

  public function send_getItemsOnsale($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getItemsOnsale_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getItemsOnsale', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getItemsOnsale', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getItemsOnsale()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getItemsOnsale_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getItemsOnsale_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getItemsOnsale failed: unknown result");
  }

  public function insightWordsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_insightWordsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_insightWordsbaseGet();
  }

  public function send_insightWordsbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightWordsbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightWordsbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightWordsbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightWordsbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightWordsbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightWordsbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightWordsbaseGet failed: unknown result");
  }

  public function waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_waitBuyerPayOrders();
  }

  public function send_waitBuyerPayOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_waitBuyerPayOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'waitBuyerPayOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('waitBuyerPayOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_waitBuyerPayOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_waitBuyerPayOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_waitBuyerPayOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("waitBuyerPayOrders failed: unknown result");
  }

  public function adgroupCatmatchGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_adgroupCatmatchGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_adgroupCatmatchGetEX();
  }

  public function send_adgroupCatmatchGetEX($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupCatmatchGetEX_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupCatmatchGetEX', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupCatmatchGetEX', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupCatmatchGetEX()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupCatmatchGetEX_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupCatmatchGetEX_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupCatmatchGetEX failed: unknown result");
  }

  public function rptCampadgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_rptCampadgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_rptCampadgroupbaseGet();
  }

  public function send_rptCampadgroupbaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptCampadgroupbaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptCampadgroupbaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptCampadgroupbaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptCampadgroupbaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptCampadgroupbaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptCampadgroupbaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptCampadgroupbaseGet failed: unknown result");
  }

  public function logisticsAddressRemove($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_logisticsAddressRemove($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_logisticsAddressRemove();
  }

  public function send_logisticsAddressRemove($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_logisticsAddressRemove_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logisticsAddressRemove', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logisticsAddressRemove', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logisticsAddressRemove()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_logisticsAddressRemove_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_logisticsAddressRemove_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("logisticsAddressRemove failed: unknown result");
  }

  public function RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_RefundRefuse();
  }

  public function send_RefundRefuse($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RefundRefuse_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RefundRefuse', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RefundRefuse', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RefundRefuse()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RefundRefuse_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RefundRefuse_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RefundRefuse failed: unknown result");
  }

  public function AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_AlipayOauthTokenGet();
  }

  public function send_AlipayOauthTokenGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_AlipayOauthTokenGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'AlipayOauthTokenGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('AlipayOauthTokenGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_AlipayOauthTokenGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_AlipayOauthTokenGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_AlipayOauthTokenGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("AlipayOauthTokenGet failed: unknown result");
  }

  public function logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_logisticsOrdersGet();
  }

  public function send_logisticsOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_logisticsOrdersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'logisticsOrdersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('logisticsOrdersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_logisticsOrdersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_logisticsOrdersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_logisticsOrdersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("logisticsOrdersGet failed: unknown result");
  }

  public function newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_newAddress();
  }

  public function send_newAddress($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_newAddress_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'newAddress', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('newAddress', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_newAddress()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_newAddress_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_newAddress_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("newAddress failed: unknown result");
  }

  public function LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_LogisticsConsignResend();
  }

  public function send_LogisticsConsignResend($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_LogisticsConsignResend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'LogisticsConsignResend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('LogisticsConsignResend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_LogisticsConsignResend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_LogisticsConsignResend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_LogisticsConsignResend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("LogisticsConsignResend failed: unknown result");
  }

  public function keywordsQscoreSet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_keywordsQscoreSet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_keywordsQscoreSet();
  }

  public function send_keywordsQscoreSet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsQscoreSet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsQscoreSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsQscoreSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsQscoreSet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsQscoreSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsQscoreSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsQscoreSet failed: unknown result");
  }

  public function keywordsAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_keywordsAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_keywordsAdd();
  }

  public function send_keywordsAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsAdd failed: unknown result");
  }

  public function TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_TradeShipAddressUpdatetrade();
  }

  public function send_TradeShipAddressUpdatetrade($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeShipAddressUpdatetrade_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeShipAddressUpdatetrade', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeShipAddressUpdatetrade', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeShipAddressUpdatetrade()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeShipAddressUpdatetrade_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeShipAddressUpdatetrade_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeShipAddressUpdatetrade failed: unknown result");
  }

  public function rptAdgroupcreativebaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_rptAdgroupcreativebaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_rptAdgroupcreativebaseGet();
  }

  public function send_rptAdgroupcreativebaseGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptAdgroupcreativebaseGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptAdgroupcreativebaseGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptAdgroupcreativebaseGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptAdgroupcreativebaseGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptAdgroupcreativebaseGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptAdgroupcreativebaseGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptAdgroupcreativebaseGet failed: unknown result");
  }

  public function DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_DummySend();
  }

  public function send_DummySend($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DummySend_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DummySend', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DummySend', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DummySend()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DummySend_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DummySend_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DummySend failed: unknown result");
  }

  public function ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_ItemRecommendDelete();
  }

  public function send_ItemRecommendDelete($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemRecommendDelete_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemRecommendDelete', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemRecommendDelete', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemRecommendDelete()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemRecommendDelete_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemRecommendDelete_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemRecommendDelete failed: unknown result");
  }

  public function ItemUpdateLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $clientinfo)
  {
    $this->send_ItemUpdateLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $clientinfo);
    return $this->recv_ItemUpdateLocation();
  }

  public function send_ItemUpdateLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $parm16, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemUpdateLocation_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->parm16 = $parm16;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemUpdateLocation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemUpdateLocation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemUpdateLocation()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemUpdateLocation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemUpdateLocation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemUpdateLocation failed: unknown result");
  }

  public function getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getTraceSearch();
  }

  public function send_getTraceSearch($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getTraceSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getTraceSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getTraceSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getTraceSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getTraceSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getTraceSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getTraceSearch failed: unknown result");
  }

  public function ShopcatsList($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_ShopcatsList($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_ShopcatsList();
  }

  public function send_ShopcatsList($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ShopcatsList_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ShopcatsList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ShopcatsList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ShopcatsList()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ShopcatsList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ShopcatsList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ShopcatsList failed: unknown result");
  }

  public function creativeAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_creativeAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_creativeAdd();
  }

  public function send_creativeAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_creativeAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'creativeAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('creativeAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_creativeAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_creativeAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_creativeAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("creativeAdd failed: unknown result");
  }

  public function insightCatsrelatedwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_insightCatsrelatedwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_insightCatsrelatedwordGet();
  }

  public function send_insightCatsrelatedwordGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightCatsrelatedwordGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightCatsrelatedwordGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightCatsrelatedwordGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightCatsrelatedwordGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightCatsrelatedwordGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightCatsrelatedwordGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightCatsrelatedwordGet failed: unknown result");
  }

  public function ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ItemsListGet();
  }

  public function send_ItemsListGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsListGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsListGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsListGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsListGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsListGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsListGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsListGet failed: unknown result");
  }

  public function adgroupCatmatchUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_adgroupCatmatchUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_adgroupCatmatchUpdate();
  }

  public function send_adgroupCatmatchUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupCatmatchUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupCatmatchUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupCatmatchUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupCatmatchUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupCatmatchUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupCatmatchUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupCatmatchUpdate failed: unknown result");
  }

  public function FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $this->send_FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo);
    return $this->recv_FenxiaoOrdersGet();
  }

  public function send_FenxiaoOrdersGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $clientinfo)
  {
    $args = new topapi_TopApiThrift_FenxiaoOrdersGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'FenxiaoOrdersGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('FenxiaoOrdersGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_FenxiaoOrdersGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_FenxiaoOrdersGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_FenxiaoOrdersGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("FenxiaoOrdersGet failed: unknown result");
  }

  public function adgroupAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_adgroupAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_adgroupAdd();
  }

  public function send_adgroupAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupAdd failed: unknown result");
  }

  public function keywordsRecommendGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $this->send_keywordsRecommendGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo);
    return $this->recv_keywordsRecommendGet();
  }

  public function send_keywordsRecommendGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsRecommendGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsRecommendGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsRecommendGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsRecommendGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsRecommendGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsRecommendGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsRecommendGet failed: unknown result");
  }

  public function getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_getAddress();
  }

  public function send_getAddress($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getAddress_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAddress', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAddress', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAddress()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getAddress_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getAddress_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getAddress failed: unknown result");
  }

  public function taobaokeItemsDetailGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_taobaokeItemsDetailGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_taobaokeItemsDetailGet();
  }

  public function send_taobaokeItemsDetailGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_taobaokeItemsDetailGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'taobaokeItemsDetailGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('taobaokeItemsDetailGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_taobaokeItemsDetailGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_taobaokeItemsDetailGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_taobaokeItemsDetailGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("taobaokeItemsDetailGet failed: unknown result");
  }

  public function getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLogisticsOrdersEx();
  }

  public function send_getLogisticsOrdersEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLogisticsOrdersEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLogisticsOrdersEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLogisticsOrdersEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLogisticsOrdersEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLogisticsOrdersEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLogisticsOrdersEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLogisticsOrdersEx failed: unknown result");
  }

  public function RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_RateListAdd();
  }

  public function send_RateListAdd($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_RateListAdd_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'RateListAdd', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('RateListAdd', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_RateListAdd()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_RateListAdd_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_RateListAdd_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("RateListAdd failed: unknown result");
  }

  public function TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradeClose();
  }

  public function send_TradeClose($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeClose_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeClose', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeClose', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeClose()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeClose_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeClose_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeClose failed: unknown result");
  }

  public function TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_TopatsUserApGet();
  }

  public function send_TopatsUserApGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TopatsUserApGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TopatsUserApGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TopatsUserApGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TopatsUserApGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TopatsUserApGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TopatsUserApGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TopatsUserApGet failed: unknown result");
  }

  public function campaignUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_campaignUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_campaignUpdate();
  }

  public function send_campaignUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignUpdate failed: unknown result");
  }

  public function keywordsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_keywordsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_keywordsGet();
  }

  public function send_keywordsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsGet failed: unknown result");
  }

  public function keywordsPriceSet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_keywordsPriceSet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_keywordsPriceSet();
  }

  public function send_keywordsPriceSet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_keywordsPriceSet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'keywordsPriceSet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('keywordsPriceSet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_keywordsPriceSet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_keywordsPriceSet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_keywordsPriceSet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("keywordsPriceSet failed: unknown result");
  }

  public function campaignBudgetGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_campaignBudgetGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_campaignBudgetGet();
  }

  public function send_campaignBudgetGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_campaignBudgetGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'campaignBudgetGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('campaignBudgetGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_campaignBudgetGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_campaignBudgetGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_campaignBudgetGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("campaignBudgetGet failed: unknown result");
  }

  public function taobaokeRebateReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_taobaokeRebateReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_taobaokeRebateReportGet();
  }

  public function send_taobaokeRebateReportGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_taobaokeRebateReportGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'taobaokeRebateReportGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('taobaokeRebateReportGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_taobaokeRebateReportGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_taobaokeRebateReportGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_taobaokeRebateReportGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("taobaokeRebateReportGet failed: unknown result");
  }

  public function tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_tradeFullinfoEX();
  }

  public function send_tradeFullinfoEX($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_tradeFullinfoEX_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'tradeFullinfoEX', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('tradeFullinfoEX', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_tradeFullinfoEX()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_tradeFullinfoEX_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_tradeFullinfoEX_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("tradeFullinfoEX failed: unknown result");
  }

  public function TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_TradeReceivetimeDelay();
  }

  public function send_TradeReceivetimeDelay($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TradeReceivetimeDelay_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TradeReceivetimeDelay', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TradeReceivetimeDelay', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TradeReceivetimeDelay()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TradeReceivetimeDelay_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TradeReceivetimeDelay_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TradeReceivetimeDelay failed: unknown result");
  }

  public function VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_VasOrderSearch();
  }

  public function send_VasOrderSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_VasOrderSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'VasOrderSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('VasOrderSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_VasOrderSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_VasOrderSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_VasOrderSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("VasOrderSearch failed: unknown result");
  }

  public function VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_VasSubscSearch();
  }

  public function send_VasSubscSearch($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_VasSubscSearch_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'VasSubscSearch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('VasSubscSearch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_VasSubscSearch()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_VasSubscSearch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_VasSubscSearch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("VasSubscSearch failed: unknown result");
  }

  public function adgroupUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $this->send_adgroupUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo);
    return $this->recv_adgroupUpdate();
  }

  public function send_adgroupUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupUpdate failed: unknown result");
  }

  public function adgroupCampcatmatchsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_adgroupCampcatmatchsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_adgroupCampcatmatchsGet();
  }

  public function send_adgroupCampcatmatchsGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupCampcatmatchsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupCampcatmatchsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupCampcatmatchsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupCampcatmatchsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupCampcatmatchsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupCampcatmatchsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupCampcatmatchsGet failed: unknown result");
  }

  public function getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_getSellerUser();
  }

  public function send_getSellerUser($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getSellerUser_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getSellerUser', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getSellerUser', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getSellerUser()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getSellerUser_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getSellerUser_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getSellerUser failed: unknown result");
  }

  public function refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_refundsingOrders();
  }

  public function send_refundsingOrders($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_refundsingOrders_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'refundsingOrders', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('refundsingOrders', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_refundsingOrders()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_refundsingOrders_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_refundsingOrders_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("refundsingOrders failed: unknown result");
  }

  public function WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_WwGroupmemberGet();
  }

  public function send_WwGroupmemberGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwGroupmemberGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwGroupmemberGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwGroupmemberGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwGroupmemberGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwGroupmemberGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwGroupmemberGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwGroupmemberGet failed: unknown result");
  }

  public function adgroupNonsearchstatesUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_adgroupNonsearchstatesUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_adgroupNonsearchstatesUpdate();
  }

  public function send_adgroupNonsearchstatesUpdate($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_adgroupNonsearchstatesUpdate_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'adgroupNonsearchstatesUpdate', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('adgroupNonsearchstatesUpdate', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_adgroupNonsearchstatesUpdate()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_adgroupNonsearchstatesUpdate_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_adgroupNonsearchstatesUpdate_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("adgroupNonsearchstatesUpdate failed: unknown result");
  }

  public function rptAdgroupkeywordeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $this->send_rptAdgroupkeywordeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo);
    return $this->recv_rptAdgroupkeywordeffectGet();
  }

  public function send_rptAdgroupkeywordeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptAdgroupkeywordeffectGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptAdgroupkeywordeffectGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptAdgroupkeywordeffectGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptAdgroupkeywordeffectGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptAdgroupkeywordeffectGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptAdgroupkeywordeffectGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptAdgroupkeywordeffectGet failed: unknown result");
  }

  public function ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_ItemGet();
  }

  public function send_ItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemGet failed: unknown result");
  }

  public function ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $this->send_ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo);
    return $this->recv_ItemsOnsaleSearchEx();
  }

  public function send_ItemsOnsaleSearchEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $parm15, $clientinfo)
  {
    $args = new topapi_TopApiThrift_ItemsOnsaleSearchEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->parm15 = $parm15;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'ItemsOnsaleSearchEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('ItemsOnsaleSearchEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_ItemsOnsaleSearchEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_ItemsOnsaleSearchEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_ItemsOnsaleSearchEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("ItemsOnsaleSearchEx failed: unknown result");
  }

  public function itemUpdateEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_itemUpdateEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_itemUpdateEx();
  }

  public function send_itemUpdateEx($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_itemUpdateEx_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'itemUpdateEx', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('itemUpdateEx', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_itemUpdateEx()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_itemUpdateEx_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_itemUpdateEx_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("itemUpdateEx failed: unknown result");
  }

  public function WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_WwNoreplynumGet();
  }

  public function send_WwNoreplynumGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_WwNoreplynumGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'WwNoreplynumGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('WwNoreplynumGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_WwNoreplynumGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_WwNoreplynumGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_WwNoreplynumGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("WwNoreplynumGet failed: unknown result");
  }

  public function TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_TopatsGet();
  }

  public function send_TopatsGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_TopatsGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'TopatsGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('TopatsGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_TopatsGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_TopatsGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_TopatsGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("TopatsGet failed: unknown result");
  }

  public function rptCampadgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $this->send_rptCampadgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo);
    return $this->recv_rptCampadgroupeffectGet();
  }

  public function send_rptCampadgroupeffectGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $clientinfo)
  {
    $args = new topapi_TopApiThrift_rptCampadgroupeffectGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'rptCampadgroupeffectGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('rptCampadgroupeffectGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_rptCampadgroupeffectGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_rptCampadgroupeffectGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_rptCampadgroupeffectGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("rptCampadgroupeffectGet failed: unknown result");
  }

  public function CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $this->send_CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo);
    return $this->recv_CompaniesGet();
  }

  public function send_CompaniesGet($parm0, $parm1, $parm2, $parm3, $clientinfo)
  {
    $args = new topapi_TopApiThrift_CompaniesGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'CompaniesGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('CompaniesGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_CompaniesGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_CompaniesGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_CompaniesGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("CompaniesGet failed: unknown result");
  }

  public function insightWordsanalysisGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $this->send_insightWordsanalysisGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo);
    return $this->recv_insightWordsanalysisGet();
  }

  public function send_insightWordsanalysisGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $clientinfo)
  {
    $args = new topapi_TopApiThrift_insightWordsanalysisGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'insightWordsanalysisGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('insightWordsanalysisGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_insightWordsanalysisGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_insightWordsanalysisGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_insightWordsanalysisGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("insightWordsanalysisGet failed: unknown result");
  }

  public function updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $this->send_updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo);
    return $this->recv_updatePrice();
  }

  public function send_updatePrice($parm0, $parm1, $parm2, $parm3, $parm4, $clientinfo)
  {
    $args = new topapi_TopApiThrift_updatePrice_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePrice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePrice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePrice()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_updatePrice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_updatePrice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePrice failed: unknown result");
  }

  public function updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $this->send_updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo);
    return $this->recv_updatePriceNew();
  }

  public function send_updatePriceNew($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $clientinfo)
  {
    $args = new topapi_TopApiThrift_updatePriceNew_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'updatePriceNew', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('updatePriceNew', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_updatePriceNew()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_updatePriceNew_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_updatePriceNew_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("updatePriceNew failed: unknown result");
  }

  public function lightState($parm0, $parm1, $parm2, $clientinfo)
  {
    $this->send_lightState($parm0, $parm1, $parm2, $clientinfo);
    return $this->recv_lightState();
  }

  public function send_lightState($parm0, $parm1, $parm2, $clientinfo)
  {
    $args = new topapi_TopApiThrift_lightState_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'lightState', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('lightState', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_lightState()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_lightState_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_lightState_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("lightState failed: unknown result");
  }

  public function udpShopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_udpShopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_udpShopGet();
  }

  public function send_udpShopGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_udpShopGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'udpShopGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('udpShopGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_udpShopGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_udpShopGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_udpShopGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("udpShopGet failed: unknown result");
  }

  public function getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $this->send_getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo);
    return $this->recv_getLocation();
  }

  public function send_getLocation($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $clientinfo)
  {
    $args = new topapi_TopApiThrift_getLocation_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getLocation', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getLocation', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getLocation()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_getLocation_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_getLocation_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("getLocation failed: unknown result");
  }

  public function udpItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $this->send_udpItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo);
    return $this->recv_udpItemGet();
  }

  public function send_udpItemGet($parm0, $parm1, $parm2, $parm3, $parm4, $parm5, $parm6, $parm7, $parm8, $parm9, $parm10, $parm11, $parm12, $parm13, $parm14, $clientinfo)
  {
    $args = new topapi_TopApiThrift_udpItemGet_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->parm2 = $parm2;
    $args->parm3 = $parm3;
    $args->parm4 = $parm4;
    $args->parm5 = $parm5;
    $args->parm6 = $parm6;
    $args->parm7 = $parm7;
    $args->parm8 = $parm8;
    $args->parm9 = $parm9;
    $args->parm10 = $parm10;
    $args->parm11 = $parm11;
    $args->parm12 = $parm12;
    $args->parm13 = $parm13;
    $args->parm14 = $parm14;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'udpItemGet', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('udpItemGet', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_udpItemGet()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_udpItemGet_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_udpItemGet_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("udpItemGet failed: unknown result");
  }

  public function DesUpackLogin($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUpackLogin($parm0, $parm1, $clientinfo);
    return $this->recv_DesUpackLogin();
  }

  public function send_DesUpackLogin($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUpackLogin_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUpackLogin', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUpackLogin', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUpackLogin()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUpackLogin_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUpackLogin_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUpackLogin failed: unknown result");
  }

  public function DesUpackLoginIphone($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUpackLoginIphone($parm0, $parm1, $clientinfo);
    return $this->recv_DesUpackLoginIphone();
  }

  public function send_DesUpackLoginIphone($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUpackLoginIphone_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUpackLoginIphone', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUpackLoginIphone', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUpackLoginIphone()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUpackLoginIphone_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUpackLoginIphone_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUpackLoginIphone failed: unknown result");
  }

  public function DesEncrypt($parm0, $parm1, $clientinfo)
  {
    $this->send_DesEncrypt($parm0, $parm1, $clientinfo);
    return $this->recv_DesEncrypt();
  }

  public function send_DesEncrypt($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesEncrypt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesEncrypt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesEncrypt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesEncrypt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesEncrypt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesEncrypt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesEncrypt failed: unknown result");
  }

  public function DesUnEncrypt($parm0, $parm1, $clientinfo)
  {
    $this->send_DesUnEncrypt($parm0, $parm1, $clientinfo);
    return $this->recv_DesUnEncrypt();
  }

  public function send_DesUnEncrypt($parm0, $parm1, $clientinfo)
  {
    $args = new topapi_TopApiThrift_DesUnEncrypt_args();
    $args->parm0 = $parm0;
    $args->parm1 = $parm1;
    $args->clientinfo = $clientinfo;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'DesUnEncrypt', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('DesUnEncrypt', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_DesUnEncrypt()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'topapi_TopApiThrift_DesUnEncrypt_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new topapi_TopApiThrift_DesUnEncrypt_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new Exception("DesUnEncrypt failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class topapi_TopApiThrift_rptCampaigneffectGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampaigneffectGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampaigneffectGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampaigneffectGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampaigneffectGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampaigneffectGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradePostAgeUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradePostAgeUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradePostAgeUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradePostAgeUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradePostAgeUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradePostAgeUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::I32, 8);
      $xfer += $output->writeI32($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SerchRateList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SerchRateList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SerchRateList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SerchRateList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SerchRateList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SerchRateList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignScheduleUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignScheduleUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignScheduleUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignScheduleUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignScheduleUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignScheduleUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatpeersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatpeersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatpeersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatpeersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatpeersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatpeersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoLoginUserGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoLoginUserGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoLoginUserGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoLoginUserGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoLoginUserGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoLoginUserGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGetEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGetEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGetEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::I32, 12);
      $xfer += $output->writeI32($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::I32, 13);
      $xfer += $output->writeI32($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsInventorGetEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsInventorGetEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsInventorGetEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAppToken_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAppToken_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAppToken_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAppToken_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAppToken_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAppToken_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfo_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfo_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfo_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfo_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerStop_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerStop_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerStop_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerStop_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerStop_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerStop_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ScheOpt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ScheOpt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ScheOpt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ScheOpt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ScheOpt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ScheOpt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SkuUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SkuUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SkuUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 11);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SkuUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SkuUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SkuUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Address_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Address_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Address_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Address_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Address_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Address_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserAccountGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserAccountGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserAccountGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserAccountGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserAccountGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserAccountGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerPermit_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerPermit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerPermit_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_incrementCustomerPermit_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_incrementCustomerPermit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_incrementCustomerPermit_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdatePic_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdatePic_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdatePic_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdatePic_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdatePic_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdatePic_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsListAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsListAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsListAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SellerCatsListAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SellerCatsListAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SellerCatsListAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_crmMembersSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $parm16 = null;
  public $parm17 = null;
  public $parm18 = null;
  public $parm19 = null;
  public $parm20 = null;
  public $parm21 = null;
  public $parm22 = null;
  public $parm23 = null;
  public $parm24 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'parm16',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'parm17',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'parm18',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'parm19',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'parm20',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'parm21',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'parm22',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'parm23',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'parm24',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['parm16'])) {
        $this->parm16 = $vals['parm16'];
      }
      if (isset($vals['parm17'])) {
        $this->parm17 = $vals['parm17'];
      }
      if (isset($vals['parm18'])) {
        $this->parm18 = $vals['parm18'];
      }
      if (isset($vals['parm19'])) {
        $this->parm19 = $vals['parm19'];
      }
      if (isset($vals['parm20'])) {
        $this->parm20 = $vals['parm20'];
      }
      if (isset($vals['parm21'])) {
        $this->parm21 = $vals['parm21'];
      }
      if (isset($vals['parm22'])) {
        $this->parm22 = $vals['parm22'];
      }
      if (isset($vals['parm23'])) {
        $this->parm23 = $vals['parm23'];
      }
      if (isset($vals['parm24'])) {
        $this->parm24 = $vals['parm24'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_crmMembersSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm16);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm17);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm18);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm19);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm20);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm21);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm22);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm23);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm24);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_crmMembersSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm16 !== null) {
      $xfer += $output->writeFieldBegin('parm16', TType::STRING, 17);
      $xfer += $output->writeString($this->parm16);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm17 !== null) {
      $xfer += $output->writeFieldBegin('parm17', TType::STRING, 18);
      $xfer += $output->writeString($this->parm17);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm18 !== null) {
      $xfer += $output->writeFieldBegin('parm18', TType::STRING, 19);
      $xfer += $output->writeString($this->parm18);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm19 !== null) {
      $xfer += $output->writeFieldBegin('parm19', TType::STRING, 20);
      $xfer += $output->writeString($this->parm19);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm20 !== null) {
      $xfer += $output->writeFieldBegin('parm20', TType::STRING, 21);
      $xfer += $output->writeString($this->parm20);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm21 !== null) {
      $xfer += $output->writeFieldBegin('parm21', TType::STRING, 22);
      $xfer += $output->writeString($this->parm21);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm22 !== null) {
      $xfer += $output->writeFieldBegin('parm22', TType::STRING, 23);
      $xfer += $output->writeString($this->parm22);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm23 !== null) {
      $xfer += $output->writeFieldBegin('parm23', TType::STRING, 24);
      $xfer += $output->writeString($this->parm23);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm24 !== null) {
      $xfer += $output->writeFieldBegin('parm24', TType::STRING, 25);
      $xfer += $output->writeString($this->parm24);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 26);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_crmMembersSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_crmMembersSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_crmMembersSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayUserGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayUserGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayUserGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayUserGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayUserGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayUserGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_userBuyerGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_userBuyerGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_userBuyerGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_userBuyerGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_userBuyerGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_userBuyerGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordscatsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordscatsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordscatsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordscatsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordscatsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordscatsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OauthTokenGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OauthTokenGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OauthTokenGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OauthTokenGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OauthTokenGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OauthTokenGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_PostageUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_PostageUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_PostageUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_PostageUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_PostageUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_PostageUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwSubusersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwSubusersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwSubusersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwSubusersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwSubusersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwSubusersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::BOOL, 4);
      $xfer += $output->writeBool($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemsTopGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemsTopGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemsTopGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemsTopGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemsTopGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemsTopGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignScheduleGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignScheduleGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignScheduleGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignScheduleGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignScheduleGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignScheduleGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundGetEX_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundGetEX_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundGetEX_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundGetEX_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundGetEX_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundGetEX_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeShopsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $parm16 = null;
  public $parm17 = null;
  public $parm18 = null;
  public $parm19 = null;
  public $parm20 = null;
  public $parm21 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'parm16',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'parm17',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'parm18',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'parm19',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'parm20',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'parm21',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['parm16'])) {
        $this->parm16 = $vals['parm16'];
      }
      if (isset($vals['parm17'])) {
        $this->parm17 = $vals['parm17'];
      }
      if (isset($vals['parm18'])) {
        $this->parm18 = $vals['parm18'];
      }
      if (isset($vals['parm19'])) {
        $this->parm19 = $vals['parm19'];
      }
      if (isset($vals['parm20'])) {
        $this->parm20 = $vals['parm20'];
      }
      if (isset($vals['parm21'])) {
        $this->parm21 = $vals['parm21'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeShopsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm16);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm17);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm18);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm19);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm20);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm21);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeShopsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm16 !== null) {
      $xfer += $output->writeFieldBegin('parm16', TType::STRING, 17);
      $xfer += $output->writeString($this->parm16);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm17 !== null) {
      $xfer += $output->writeFieldBegin('parm17', TType::STRING, 18);
      $xfer += $output->writeString($this->parm17);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm18 !== null) {
      $xfer += $output->writeFieldBegin('parm18', TType::STRING, 19);
      $xfer += $output->writeString($this->parm18);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm19 !== null) {
      $xfer += $output->writeFieldBegin('parm19', TType::STRING, 20);
      $xfer += $output->writeString($this->parm19);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm20 !== null) {
      $xfer += $output->writeFieldBegin('parm20', TType::STRING, 21);
      $xfer += $output->writeString($this->parm20);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm21 !== null) {
      $xfer += $output->writeFieldBegin('parm21', TType::STRING, 22);
      $xfer += $output->writeString($this->parm21);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 23);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeShopsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeShopsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeShopsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignPlatformGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignPlatformGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignPlatformGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignPlatformGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignPlatformGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignPlatformGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_loginAuthsignGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_loginAuthsignGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_loginAuthsignGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_loginAuthsignGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_loginAuthsignGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_loginAuthsignGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightToplevelcatsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightToplevelcatsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightToplevelcatsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightToplevelcatsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightToplevelcatsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightToplevelcatsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_accountBalanceGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_accountBalanceGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_accountBalanceGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_accountBalanceGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_accountBalanceGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_accountBalanceGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TqlOpt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TqlOpt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TqlOpt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TqlOpt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TqlOpt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TqlOpt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupkeywordbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupkeywordbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupkeywordbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupkeywordbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupkeywordbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupkeywordbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUser_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUser_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OnlineSend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OnlineSend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OnlineSend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OnlineSend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OnlineSend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OnlineSend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSoldEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSoldEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSoldEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSoldEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSoldEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSoldEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrdersEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrdersEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrdersEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrdersEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrdersEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrdersEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_traderatesGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_traderatesGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_traderatesGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_traderatesGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_traderatesGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_traderatesGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatlogGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatlogGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatlogGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatlogGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatlogGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatlogGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdateXe_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdateXe_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdateXe_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::BOOL, 12);
      $xfer += $output->writeBool($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::BOOL, 13);
      $xfer += $output->writeBool($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdateXe_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdateXe_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdateXe_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OfflineSend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OfflineSend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OfflineSend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_OfflineSend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_OfflineSend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_OfflineSend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeReportGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeReportGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeReportGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeReportGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeReportGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeReportGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSold_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSold_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSold_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::I32, 4);
      $xfer += $output->writeI32($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTradesSold_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTradesSold_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTradesSold_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupidsDeletedGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupidsDeletedGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupidsDeletedGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupidsDeletedGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupidsDeletedGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupidsDeletedGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeItemsCouponGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $parm16 = null;
  public $parm17 = null;
  public $parm18 = null;
  public $parm19 = null;
  public $parm20 = null;
  public $parm21 = null;
  public $parm22 = null;
  public $parm23 = null;
  public $parm24 = null;
  public $parm25 = null;
  public $parm26 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'parm16',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'parm17',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'parm18',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'parm19',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'parm20',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'parm21',
          'type' => TType::STRING,
          ),
        23 => array(
          'var' => 'parm22',
          'type' => TType::STRING,
          ),
        24 => array(
          'var' => 'parm23',
          'type' => TType::STRING,
          ),
        25 => array(
          'var' => 'parm24',
          'type' => TType::STRING,
          ),
        26 => array(
          'var' => 'parm25',
          'type' => TType::STRING,
          ),
        27 => array(
          'var' => 'parm26',
          'type' => TType::STRING,
          ),
        28 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['parm16'])) {
        $this->parm16 = $vals['parm16'];
      }
      if (isset($vals['parm17'])) {
        $this->parm17 = $vals['parm17'];
      }
      if (isset($vals['parm18'])) {
        $this->parm18 = $vals['parm18'];
      }
      if (isset($vals['parm19'])) {
        $this->parm19 = $vals['parm19'];
      }
      if (isset($vals['parm20'])) {
        $this->parm20 = $vals['parm20'];
      }
      if (isset($vals['parm21'])) {
        $this->parm21 = $vals['parm21'];
      }
      if (isset($vals['parm22'])) {
        $this->parm22 = $vals['parm22'];
      }
      if (isset($vals['parm23'])) {
        $this->parm23 = $vals['parm23'];
      }
      if (isset($vals['parm24'])) {
        $this->parm24 = $vals['parm24'];
      }
      if (isset($vals['parm25'])) {
        $this->parm25 = $vals['parm25'];
      }
      if (isset($vals['parm26'])) {
        $this->parm26 = $vals['parm26'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeItemsCouponGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm16);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm17);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm18);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm19);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm20);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm21);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm22);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm23);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm24);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm25);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm26);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeItemsCouponGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm16 !== null) {
      $xfer += $output->writeFieldBegin('parm16', TType::STRING, 17);
      $xfer += $output->writeString($this->parm16);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm17 !== null) {
      $xfer += $output->writeFieldBegin('parm17', TType::STRING, 18);
      $xfer += $output->writeString($this->parm17);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm18 !== null) {
      $xfer += $output->writeFieldBegin('parm18', TType::STRING, 19);
      $xfer += $output->writeString($this->parm18);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm19 !== null) {
      $xfer += $output->writeFieldBegin('parm19', TType::STRING, 20);
      $xfer += $output->writeString($this->parm19);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm20 !== null) {
      $xfer += $output->writeFieldBegin('parm20', TType::STRING, 21);
      $xfer += $output->writeString($this->parm20);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm21 !== null) {
      $xfer += $output->writeFieldBegin('parm21', TType::STRING, 22);
      $xfer += $output->writeString($this->parm21);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm22 !== null) {
      $xfer += $output->writeFieldBegin('parm22', TType::STRING, 23);
      $xfer += $output->writeString($this->parm22);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm23 !== null) {
      $xfer += $output->writeFieldBegin('parm23', TType::STRING, 24);
      $xfer += $output->writeString($this->parm23);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm24 !== null) {
      $xfer += $output->writeFieldBegin('parm24', TType::STRING, 25);
      $xfer += $output->writeString($this->parm24);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm25 !== null) {
      $xfer += $output->writeFieldBegin('parm25', TType::STRING, 26);
      $xfer += $output->writeString($this->parm25);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm26 !== null) {
      $xfer += $output->writeFieldBegin('parm26', TType::STRING, 27);
      $xfer += $output->writeString($this->parm26);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 28);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeItemsCouponGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeItemsCouponGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeItemsCouponGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatstopwordGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatstopwordGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatstopwordGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatstopwordGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatstopwordGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatstopwordGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignPlatformUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignPlatformUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignPlatformUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignPlatformUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignPlatformUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignPlatformUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Priceupdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Priceupdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Priceupdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_Priceupdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_Priceupdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_Priceupdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_autologin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_autologin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_autologin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_autologin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_autologin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_autologin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::BOOL,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::BOOL,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::BOOL, 11);
      $xfer += $output->writeBool($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::BOOL, 12);
      $xfer += $output->writeBool($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TaskDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TaskDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TaskDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TaskDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TaskDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TaskDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_deliveryTemplateGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_deliveryTemplateGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_deliveryTemplateGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_deliveryTemplateGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_deliveryTemplateGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_deliveryTemplateGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampaignbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampaignbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampaignbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampaignbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampaignbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampaignbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaoptionsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaoptionsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaoptionsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignAreaoptionsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignAreaoptionsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignAreaoptionsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupsItemExist_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupsItemExist_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupsItemExist_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupsItemExist_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupsItemExist_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupsItemExist_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getShop_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getShop_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getShop_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getShop_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getShop_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getShop_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserTradeSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserTradeSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserTradeSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserTradeSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserTradeSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserTradeSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersDetail_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersDetail_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersDetail_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersDetail_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersDetail_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersDetail_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::BOOL, 6);
      $xfer += $output->writeBool($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersMessageAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersMessageAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersMessageAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersMessageAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersMessageAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersMessageAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLoginNew_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLoginNew_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLoginNew_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLoginNew_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLoginNew_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLoginNew_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatrecordGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatrecordGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatrecordGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwChatrecordGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwChatrecordGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwChatrecordGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopRemainShowCase_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopRemainShowCase_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopRemainShowCase_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopRemainShowCase_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopRemainShowCase_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopRemainShowCase_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignBudgetUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignBudgetUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignBudgetUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignBudgetUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignBudgetUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignBudgetUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupeffectGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupeffectGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupeffectGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupeffectGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupeffectGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupeffectGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_deliveryTemplateUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_deliveryTemplateUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_deliveryTemplateUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_deliveryTemplateUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_deliveryTemplateUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_deliveryTemplateUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateDelisting_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateDelisting_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateDelisting_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateDelisting_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateDelisting_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateDelisting_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignChanneloptionsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignChanneloptionsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignChanneloptionsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignChanneloptionsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignChanneloptionsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignChanneloptionsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupOnlineitemsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupOnlineitemsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupOnlineitemsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::BOOL, 3);
      $xfer += $output->writeBool($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupOnlineitemsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupOnlineitemsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupOnlineitemsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AddressUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AddressUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AddressUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AddressUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AddressUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AddressUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserContractGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserContractGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserContractGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UserContractGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UserContractGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UserContractGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CatsListUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CatsListUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CatsListUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CatsListUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CatsListUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CatsListUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::I32, 7);
      $xfer += $output->writeI32($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SubscribeGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SubscribeGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SubscribeGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_SubscribeGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_SubscribeGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_SubscribeGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_crmMembersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_crmMembersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_crmMembersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_crmMembersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_crmMembersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_crmMembersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UmpPromotionGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UmpPromotionGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UmpPromotionGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UmpPromotionGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UmpPromotionGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UmpPromotionGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwReceivenumGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwReceivenumGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwReceivenumGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwReceivenumGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwReceivenumGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwReceivenumGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLogin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLogin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLogin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_topLogin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_topLogin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_topLogin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeMemoAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeMemoAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeMemoAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundMessageAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundMessageAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundMessageAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUsers_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUsers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUsers_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getUsers_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getUsers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getUsers_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateListing_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateListing_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateListing_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_UpdateListing_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_UpdateListing_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_UpdateListing_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsOnsale_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsOnsale_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsOnsale_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getItemsOnsale_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getItemsOnsale_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getItemsOnsale_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordsbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordsbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordsbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordsbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordsbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordsbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_waitBuyerPayOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_waitBuyerPayOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_waitBuyerPayOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::I32, 6);
      $xfer += $output->writeI32($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_waitBuyerPayOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_waitBuyerPayOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_waitBuyerPayOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchGetEX_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchGetEX_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchGetEX_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchGetEX_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchGetEX_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchGetEX_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampadgroupbaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampadgroupbaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampadgroupbaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampadgroupbaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampadgroupbaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampadgroupbaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsAddressRemove_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsAddressRemove_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsAddressRemove_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsAddressRemove_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsAddressRemove_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsAddressRemove_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundRefuse_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundRefuse_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundRefuse_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RefundRefuse_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RefundRefuse_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RefundRefuse_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayOauthTokenGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayOauthTokenGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayOauthTokenGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_AlipayOauthTokenGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_AlipayOauthTokenGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_AlipayOauthTokenGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsOrdersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsOrdersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsOrdersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_logisticsOrdersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_logisticsOrdersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_logisticsOrdersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_newAddress_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_newAddress_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_newAddress_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_newAddress_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_newAddress_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_newAddress_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_LogisticsConsignResend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_LogisticsConsignResend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_LogisticsConsignResend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_LogisticsConsignResend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_LogisticsConsignResend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_LogisticsConsignResend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsQscoreSet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsQscoreSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsQscoreSet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsQscoreSet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsQscoreSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsQscoreSet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeShipAddressUpdatetrade_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeShipAddressUpdatetrade_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeShipAddressUpdatetrade_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeShipAddressUpdatetrade_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeShipAddressUpdatetrade_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeShipAddressUpdatetrade_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupcreativebaseGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupcreativebaseGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupcreativebaseGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupcreativebaseGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupcreativebaseGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupcreativebaseGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DummySend_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DummySend_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DummySend_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DummySend_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DummySend_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DummySend_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendDelete_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendDelete_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendDelete_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemRecommendDelete_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemRecommendDelete_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemRecommendDelete_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdateLocation_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $parm16 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::BOOL,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::BOOL,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'parm16',
          'type' => TType::STRING,
          ),
        18 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['parm16'])) {
        $this->parm16 = $vals['parm16'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdateLocation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm16);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdateLocation_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::BOOL, 13);
      $xfer += $output->writeBool($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::BOOL, 14);
      $xfer += $output->writeBool($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm16 !== null) {
      $xfer += $output->writeFieldBegin('parm16', TType::STRING, 17);
      $xfer += $output->writeString($this->parm16);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 18);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemUpdateLocation_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemUpdateLocation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemUpdateLocation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTraceSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTraceSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTraceSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getTraceSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getTraceSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getTraceSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopcatsList_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopcatsList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopcatsList_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ShopcatsList_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ShopcatsList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ShopcatsList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_creativeAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_creativeAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_creativeAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsrelatedwordGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsrelatedwordGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsrelatedwordGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightCatsrelatedwordGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightCatsrelatedwordGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightCatsrelatedwordGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsListGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsListGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsListGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsListGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsListGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsListGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::BOOL, 5);
      $xfer += $output->writeBool($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCatmatchUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCatmatchUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCatmatchUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 12);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_FenxiaoOrdersGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_FenxiaoOrdersGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_FenxiaoOrdersGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsRecommendGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsRecommendGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsRecommendGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 11);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsRecommendGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsRecommendGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsRecommendGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAddress_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAddress_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAddress_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getAddress_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getAddress_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getAddress_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeItemsDetailGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeItemsDetailGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeItemsDetailGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeItemsDetailGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeItemsDetailGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeItemsDetailGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLogisticsOrdersEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLogisticsOrdersEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLogisticsOrdersEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateListAdd_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::BOOL,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateListAdd_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateListAdd_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::BOOL, 5);
      $xfer += $output->writeBool($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_RateListAdd_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_RateListAdd_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_RateListAdd_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeClose_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeClose_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeClose_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeClose_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeClose_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeClose_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsUserApGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsUserApGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsUserApGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsUserApGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsUserApGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsUserApGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsPriceSet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsPriceSet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsPriceSet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_keywordsPriceSet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_keywordsPriceSet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_keywordsPriceSet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignBudgetGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignBudgetGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignBudgetGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_campaignBudgetGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_campaignBudgetGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_campaignBudgetGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeRebateReportGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeRebateReportGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeRebateReportGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_taobaokeRebateReportGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_taobaokeRebateReportGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_taobaokeRebateReportGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfoEX_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfoEX_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfoEX_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_tradeFullinfoEX_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_tradeFullinfoEX_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_tradeFullinfoEX_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeReceivetimeDelay_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeReceivetimeDelay_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeReceivetimeDelay_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TradeReceivetimeDelay_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TradeReceivetimeDelay_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TradeReceivetimeDelay_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasOrderSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasOrderSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasOrderSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasOrderSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasOrderSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasOrderSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasSubscSearch_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasSubscSearch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasSubscSearch_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_VasSubscSearch_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_VasSubscSearch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_VasSubscSearch_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 10);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCampcatmatchsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCampcatmatchsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCampcatmatchsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupCampcatmatchsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupCampcatmatchsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupCampcatmatchsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getSellerUser_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getSellerUser_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getSellerUser_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getSellerUser_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getSellerUser_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getSellerUser_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrders_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrders_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrders_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::I32, 4);
      $xfer += $output->writeI32($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::I32, 5);
      $xfer += $output->writeI32($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_refundsingOrders_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_refundsingOrders_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_refundsingOrders_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwGroupmemberGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwGroupmemberGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwGroupmemberGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwGroupmemberGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwGroupmemberGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwGroupmemberGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupNonsearchstatesUpdate_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupNonsearchstatesUpdate_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupNonsearchstatesUpdate_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_adgroupNonsearchstatesUpdate_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_adgroupNonsearchstatesUpdate_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_adgroupNonsearchstatesUpdate_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupkeywordeffectGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupkeywordeffectGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupkeywordeffectGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 14);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptAdgroupkeywordeffectGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptAdgroupkeywordeffectGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptAdgroupkeywordeffectGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearchEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $parm15 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'parm15',
          'type' => TType::STRING,
          ),
        17 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['parm15'])) {
        $this->parm15 = $vals['parm15'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearchEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm15);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearchEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::I32, 12);
      $xfer += $output->writeI32($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::I32, 13);
      $xfer += $output->writeI32($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm15 !== null) {
      $xfer += $output->writeFieldBegin('parm15', TType::STRING, 16);
      $xfer += $output->writeString($this->parm15);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 17);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_ItemsOnsaleSearchEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_ItemsOnsaleSearchEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_ItemsOnsaleSearchEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemUpdateEx_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemUpdateEx_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemUpdateEx_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_itemUpdateEx_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_itemUpdateEx_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_itemUpdateEx_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwNoreplynumGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwNoreplynumGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwNoreplynumGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_WwNoreplynumGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_WwNoreplynumGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_WwNoreplynumGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_TopatsGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_TopatsGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_TopatsGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampadgroupeffectGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampadgroupeffectGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampadgroupeffectGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 13);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_rptCampadgroupeffectGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_rptCampadgroupeffectGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_rptCampadgroupeffectGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CompaniesGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CompaniesGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CompaniesGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 5);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_CompaniesGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_CompaniesGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_CompaniesGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordsanalysisGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordsanalysisGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordsanalysisGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 7);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_insightWordsanalysisGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_insightWordsanalysisGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_insightWordsanalysisGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePrice_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePrice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePrice_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 6);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePrice_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePrice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePrice_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePriceNew_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePriceNew_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePriceNew_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 8);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_updatePriceNew_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_updatePriceNew_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_updatePriceNew_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_lightState_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_lightState_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_lightState_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 4);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_lightState_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_lightState_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_lightState_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_udpShopGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_udpShopGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_udpShopGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_udpShopGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_udpShopGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_udpShopGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLocation_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLocation_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLocation_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 9);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_getLocation_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_getLocation_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_getLocation_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_udpItemGet_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $parm2 = null;
  public $parm3 = null;
  public $parm4 = null;
  public $parm5 = null;
  public $parm6 = null;
  public $parm7 = null;
  public $parm8 = null;
  public $parm9 = null;
  public $parm10 = null;
  public $parm11 = null;
  public $parm12 = null;
  public $parm13 = null;
  public $parm14 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'parm2',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'parm3',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'parm4',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'parm5',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'parm6',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'parm7',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'parm8',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'parm9',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'parm10',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'parm11',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'parm12',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'parm13',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'parm14',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['parm2'])) {
        $this->parm2 = $vals['parm2'];
      }
      if (isset($vals['parm3'])) {
        $this->parm3 = $vals['parm3'];
      }
      if (isset($vals['parm4'])) {
        $this->parm4 = $vals['parm4'];
      }
      if (isset($vals['parm5'])) {
        $this->parm5 = $vals['parm5'];
      }
      if (isset($vals['parm6'])) {
        $this->parm6 = $vals['parm6'];
      }
      if (isset($vals['parm7'])) {
        $this->parm7 = $vals['parm7'];
      }
      if (isset($vals['parm8'])) {
        $this->parm8 = $vals['parm8'];
      }
      if (isset($vals['parm9'])) {
        $this->parm9 = $vals['parm9'];
      }
      if (isset($vals['parm10'])) {
        $this->parm10 = $vals['parm10'];
      }
      if (isset($vals['parm11'])) {
        $this->parm11 = $vals['parm11'];
      }
      if (isset($vals['parm12'])) {
        $this->parm12 = $vals['parm12'];
      }
      if (isset($vals['parm13'])) {
        $this->parm13 = $vals['parm13'];
      }
      if (isset($vals['parm14'])) {
        $this->parm14 = $vals['parm14'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_udpItemGet_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm9);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm10);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm11);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm12);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm13);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm14);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_udpItemGet_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm2 !== null) {
      $xfer += $output->writeFieldBegin('parm2', TType::STRING, 3);
      $xfer += $output->writeString($this->parm2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm3 !== null) {
      $xfer += $output->writeFieldBegin('parm3', TType::STRING, 4);
      $xfer += $output->writeString($this->parm3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm4 !== null) {
      $xfer += $output->writeFieldBegin('parm4', TType::STRING, 5);
      $xfer += $output->writeString($this->parm4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm5 !== null) {
      $xfer += $output->writeFieldBegin('parm5', TType::STRING, 6);
      $xfer += $output->writeString($this->parm5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm6 !== null) {
      $xfer += $output->writeFieldBegin('parm6', TType::STRING, 7);
      $xfer += $output->writeString($this->parm6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm7 !== null) {
      $xfer += $output->writeFieldBegin('parm7', TType::STRING, 8);
      $xfer += $output->writeString($this->parm7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm8 !== null) {
      $xfer += $output->writeFieldBegin('parm8', TType::STRING, 9);
      $xfer += $output->writeString($this->parm8);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm9 !== null) {
      $xfer += $output->writeFieldBegin('parm9', TType::STRING, 10);
      $xfer += $output->writeString($this->parm9);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm10 !== null) {
      $xfer += $output->writeFieldBegin('parm10', TType::STRING, 11);
      $xfer += $output->writeString($this->parm10);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm11 !== null) {
      $xfer += $output->writeFieldBegin('parm11', TType::STRING, 12);
      $xfer += $output->writeString($this->parm11);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm12 !== null) {
      $xfer += $output->writeFieldBegin('parm12', TType::STRING, 13);
      $xfer += $output->writeString($this->parm12);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm13 !== null) {
      $xfer += $output->writeFieldBegin('parm13', TType::STRING, 14);
      $xfer += $output->writeString($this->parm13);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm14 !== null) {
      $xfer += $output->writeFieldBegin('parm14', TType::STRING, 15);
      $xfer += $output->writeString($this->parm14);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 16);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_udpItemGet_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_udpItemGet_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_udpItemGet_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLogin_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLogin_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLogin_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLogin_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLogin_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLogin_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLoginIphone_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLoginIphone_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLoginIphone_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUpackLoginIphone_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUpackLoginIphone_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUpackLoginIphone_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesEncrypt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesEncrypt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesEncrypt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesEncrypt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesEncrypt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesEncrypt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUnEncrypt_args {
  static $_TSPEC;

  public $parm0 = null;
  public $parm1 = null;
  public $clientinfo = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parm0',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'parm1',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'clientinfo',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parm0'])) {
        $this->parm0 = $vals['parm0'];
      }
      if (isset($vals['parm1'])) {
        $this->parm1 = $vals['parm1'];
      }
      if (isset($vals['clientinfo'])) {
        $this->clientinfo = $vals['clientinfo'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUnEncrypt_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->parm1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->clientinfo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUnEncrypt_args');
    if ($this->parm0 !== null) {
      $xfer += $output->writeFieldBegin('parm0', TType::STRING, 1);
      $xfer += $output->writeString($this->parm0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parm1 !== null) {
      $xfer += $output->writeFieldBegin('parm1', TType::STRING, 2);
      $xfer += $output->writeString($this->parm1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clientinfo !== null) {
      $xfer += $output->writeFieldBegin('clientinfo', TType::STRING, 3);
      $xfer += $output->writeString($this->clientinfo);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class topapi_TopApiThrift_DesUnEncrypt_result {
  static $_TSPEC;

  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => 'topapi_TopApiResultThrift',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TopApiThrift_DesUnEncrypt_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new topapi_TopApiResultThrift();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopApiThrift_DesUnEncrypt_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
